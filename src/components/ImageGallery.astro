---
export interface Props {
  images: string[];
  title: string;
  availability?: string;
}

const { images, title, availability } = Astro.props;
---

<div class="enhanced-image-gallery" data-images={JSON.stringify(images)}>
  {images && images.length > 0 ? (
    <div class="space-y-6">
      <!-- Main Image Display -->
      <div class="relative group">
        <div class="relative overflow-hidden rounded-2xl bg-gradient-to-br from-gray-100 to-gray-200" style="aspect-ratio: 16/10;">
          <img
            id="mainImage"
            src={images[0]}
            alt={title}
            class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
            loading="eager"
            decoding="async"
          />
          
          <!-- Gradient Overlay on Hover -->
          <div class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          
          <!-- Status Badge -->
          {availability && availability !== 'available' && (
            <div class={`absolute top-6 right-6 px-4 py-2 rounded-full text-white font-bold shadow-lg backdrop-blur-sm ${
              availability === 'pending' ? 'bg-yellow-500/90' : 'bg-red-500/90'
            }`}>
              {availability === 'pending' ? 'Pending' : 'Leased'}
            </div>
          )}

          <!-- Image Counter -->
          <div class="absolute bottom-6 right-6 bg-black/60 backdrop-blur-sm text-white px-4 py-2 rounded-full text-sm font-semibold">
            <span id="currentImageIndex">1</span> / <span id="totalImages">{images.length}</span>
          </div>

          <!-- Navigation Arrows -->
          {images.length > 1 && (
            <>
              <button 
                id="prevBtn"
                class="absolute left-6 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 opacity-0 group-hover:opacity-100"
                aria-label="Previous image"
              >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              
              <button 
                id="nextBtn"
                class="absolute right-6 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 opacity-0 group-hover:opacity-100"
                aria-label="Next image"
              >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </>
          )}

          <!-- Zoom Button -->
          <button 
            id="zoomBtn"
            class="absolute top-6 left-6 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 opacity-0 group-hover:opacity-100"
            aria-label="Zoom image"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Thumbnail Grid -->
      {images.length > 1 && (
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <h4 class="font-semibold text-gray-700">Property Gallery</h4>
            <button 
              id="viewAllBtn"
              class="text-blue-600 hover:text-blue-700 text-sm font-semibold transition-colors duration-300"
            >
              View All ({images.length})
            </button>
          </div>
          
          <div class="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-3" id="thumbnailGrid">
            {images.map((image, index) => (
              <button
                class={`thumbnail-btn relative overflow-hidden rounded-xl aspect-square transition-all duration-300 transform hover:scale-105 hover:shadow-lg border-3 ${
                  index === 0 ? 'border-blue-500 ring-2 ring-blue-500/20' : 'border-transparent hover:border-blue-300'
                }`}
                data-image={image}
                data-index={index}
                type="button"
                aria-label={`View image ${index + 1}`}
              >
                <img
                  src={image}
                  alt={`${title} - Image ${index + 1}`}
                  class="w-full h-full object-cover"
                  loading="lazy"
                  decoding="async"
                />
                
                <!-- Overlay on non-active thumbnails -->
                <div class={`absolute inset-0 bg-black/20 transition-opacity duration-300 ${
                  index === 0 ? 'opacity-0' : 'opacity-100 hover:opacity-50'
                }`}></div>
                
                <!-- Play icon for video thumbnails (placeholder) -->
                {index === 0 && (
                  <div class="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300">
                    <!-- Add video play icon if needed -->
                  </div>
                )}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  ) : (
    <!-- No Images Placeholder -->
    <div class="relative overflow-hidden rounded-2xl bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center" style="aspect-ratio: 16/10;">
      <div class="text-center">
        <svg class="w-20 h-20 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
        </svg>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">Property Images</h3>
        <p class="text-gray-500">Professional photography coming soon</p>
      </div>
    </div>
  )}
</div>

<!-- Fullscreen Modal -->
<div id="fullscreenModal" class="fixed inset-0 bg-black/95 backdrop-blur-sm z-50 opacity-0 invisible transition-all duration-300">
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <!-- Close Button -->
    <button 
      id="closeModal"
      class="absolute top-6 right-6 bg-white/20 hover:bg-white/30 text-white p-3 rounded-full transition-all duration-300 z-10"
      aria-label="Close fullscreen view"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Image Container -->
    <div class="relative max-w-7xl max-h-full">
      <img
        id="fullscreenImage"
        class="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
        alt=""
      />
      
      <!-- Navigation in Fullscreen -->
      <button 
        id="fullscreenPrev"
        class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white p-4 rounded-full transition-all duration-300"
        aria-label="Previous image"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button 
        id="fullscreenNext"
        class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white p-4 rounded-full transition-all duration-300"
        aria-label="Next image"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>

    <!-- Image Info -->
    <div class="absolute bottom-6 left-6 right-6 text-center text-white">
      <div class="bg-black/50 backdrop-blur-sm rounded-2xl px-6 py-4 inline-block">
        <p class="font-semibold" id="fullscreenImageTitle">{title}</p>
        <p class="text-sm text-gray-300 mt-1">
          <span id="fullscreenImageIndex">1</span> of <span id="fullscreenImageTotal">{images.length}</span>
        </p>
      </div>
    </div>
  </div>
</div>

<style>
  /* Enhanced hover effects */
  .thumbnail-btn:hover img {
    transform: scale(1.1);
  }
  
  .thumbnail-btn img {
    transition: transform 0.3s ease;
  }

  /* Smooth transitions for main image */
  #mainImage {
    transition: opacity 0.3s ease, transform 0.5s ease;
  }

  /* Custom scrollbar for thumbnail grid */
  #thumbnailGrid::-webkit-scrollbar {
    height: 4px;
  }
  
  #thumbnailGrid::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 2px;
  }
  
  #thumbnailGrid::-webkit-scrollbar-thumb {
    background: #3b82f6;
    border-radius: 2px;
  }
  
  #thumbnailGrid::-webkit-scrollbar-thumb:hover {
    background: #2563eb;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleries = document.querySelectorAll('.enhanced-image-gallery');
    
    galleries.forEach(gallery => {
      const imagesData = JSON.parse(gallery.getAttribute('data-images') || '[]');
      if (imagesData.length === 0) return;

      const mainImage = gallery.querySelector('#mainImage') as HTMLImageElement;
      const thumbnailBtns = gallery.querySelectorAll('.thumbnail-btn');
      const currentImageIndex = gallery.querySelector('#currentImageIndex');
      const totalImages = gallery.querySelector('#totalImages');
      const prevBtn = gallery.querySelector('#prevBtn');
      const nextBtn = gallery.querySelector('#nextBtn');
      const zoomBtn = gallery.querySelector('#zoomBtn');
      const viewAllBtn = gallery.querySelector('#viewAllBtn');
      
      // Modal elements
      const fullscreenModal = document.getElementById('fullscreenModal');
      const fullscreenImage = document.getElementById('fullscreenImage') as HTMLImageElement;
      const closeModal = document.getElementById('closeModal');
      const fullscreenPrev = document.getElementById('fullscreenPrev');
      const fullscreenNext = document.getElementById('fullscreenNext');
      const fullscreenImageIndex = document.getElementById('fullscreenImageIndex');
      const fullscreenImageTotal = document.getElementById('fullscreenImageTotal');
      
      let currentIndex = 0;

      function updateImage(index: number) {
        if (!mainImage || !imagesData[index]) return;
        
        currentIndex = index;
        
        // Fade out
        mainImage.style.opacity = '0.5';
        
        setTimeout(() => {
          mainImage.src = imagesData[index];
          mainImage.style.opacity = '1';
          
          // Update counter
          if (currentImageIndex) currentImageIndex.textContent = (index + 1).toString();
          
          // Update thumbnail active state
          thumbnailBtns.forEach((btn, i) => {
            const isActive = i === index;
            btn.classList.toggle('border-blue-500', isActive);
            btn.classList.toggle('ring-2', isActive);
            btn.classList.toggle('ring-blue-500/20', isActive);
            btn.classList.toggle('border-transparent', !isActive);
            
            const overlay = btn.querySelector('div');
            if (overlay) {
              overlay.classList.toggle('opacity-0', isActive);
              overlay.classList.toggle('opacity-100', !isActive);
            }
          });
        }, 150);
      }

      function updateFullscreenImage(index: number) {
        if (!fullscreenImage || !imagesData[index]) return;
        
        fullscreenImage.src = imagesData[index];
        if (fullscreenImageIndex) fullscreenImageIndex.textContent = (index + 1).toString();
      }

      function showFullscreen(index: number = currentIndex) {
        if (!fullscreenModal || !fullscreenImage) return;
        
        currentIndex = index;
        updateFullscreenImage(index);
        
        fullscreenModal.classList.remove('opacity-0', 'invisible');
        fullscreenModal.classList.add('opacity-100', 'visible');
        document.body.style.overflow = 'hidden';
      }

      function hideFullscreen() {
        if (!fullscreenModal) return;
        
        fullscreenModal.classList.add('opacity-0', 'invisible');
        fullscreenModal.classList.remove('opacity-100', 'visible');
        document.body.style.overflow = '';
      }

      function nextImage() {
        const newIndex = (currentIndex + 1) % imagesData.length;
        updateImage(newIndex);
        if (fullscreenModal?.classList.contains('visible')) {
          updateFullscreenImage(newIndex);
        }
      }

      function prevImage() {
        const newIndex = currentIndex === 0 ? imagesData.length - 1 : currentIndex - 1;
        updateImage(newIndex);
        if (fullscreenModal?.classList.contains('visible')) {
          updateFullscreenImage(newIndex);
        }
      }

      // Thumbnail click handlers
      thumbnailBtns.forEach((btn, index) => {
        btn.addEventListener('click', () => {
          updateImage(index);
        });
      });

      // Navigation button handlers
      prevBtn?.addEventListener('click', prevImage);
      nextBtn?.addEventListener('click', nextImage);
      fullscreenPrev?.addEventListener('click', prevImage);
      fullscreenNext?.addEventListener('click', nextImage);

      // Zoom/fullscreen handlers
      zoomBtn?.addEventListener('click', () => showFullscreen());
      viewAllBtn?.addEventListener('click', () => showFullscreen());
      mainImage?.addEventListener('dblclick', () => showFullscreen());

      // Modal close handlers
      closeModal?.addEventListener('click', hideFullscreen);
      fullscreenModal?.addEventListener('click', (e) => {
        if (e.target === fullscreenModal) hideFullscreen();
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!fullscreenModal?.classList.contains('visible')) return;
        
        switch (e.key) {
          case 'Escape':
            hideFullscreen();
            break;
          case 'ArrowLeft':
            prevImage();
            break;
          case 'ArrowRight':
            nextImage();
            break;
        }
      });

      // Touch/swipe support for mobile
      let touchStartX = 0;
      let touchEndX = 0;

      const handleTouchStart = (e: TouchEvent) => {
        touchStartX = e.changedTouches[0].screenX;
      };

      const handleTouchEnd = (e: TouchEvent) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      };

      const handleSwipe = () => {
        const swipeThreshold = 50;
        const swipeDistance = touchEndX - touchStartX;
        
        if (Math.abs(swipeDistance) > swipeThreshold) {
          if (swipeDistance > 0) {
            prevImage();
          } else {
            nextImage();
          }
        }
      };

      mainImage?.addEventListener('touchstart', handleTouchStart, { passive: true });
      mainImage?.addEventListener('touchend', handleTouchEnd, { passive: true });
      fullscreenImage?.addEventListener('touchstart', handleTouchStart, { passive: true });
      fullscreenImage?.addEventListener('touchend', handleTouchEnd, { passive: true });

      // Initialize
      if (totalImages) totalImages.textContent = imagesData.length.toString();
      if (fullscreenImageTotal) fullscreenImageTotal.textContent = imagesData.length.toString();
      updateImage(0);
    });
  });
</script>