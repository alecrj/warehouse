---
import Navigation from '../components/Navigation.astro';

interface Props {
  title: string;
  description?: string;
  image?: string;
  ogType?: string;
}

const { 
  title, 
  description = "Free tenant representation for your next warehouse lease in South Florida, powered by Ariel Realty Group.", 
  image = "/images/og-image.jpg", 
  ogType = "website" 
} = Astro.props as Props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(image, Astro.url);
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
  <!-- Essential Meta Tags -->
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="generator" content={Astro.generator} />
  
  <!-- SEO Meta Tags -->
  <title>{title}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={canonicalURL} />
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content={ogType} />
  <meta property="og:url" content={Astro.url} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={socialImageURL} />
  <meta property="og:site_name" content="Ariel Realty Group" />
  
  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={Astro.url} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={socialImageURL} />
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
  
  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  
  <!-- GSAP - Load first for animations -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>

  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    // Fixed: Properly configure Tailwind with type safety
    if (typeof window !== 'undefined' && window.tailwind && typeof window.tailwind.config === 'function') {
      window.tailwind.config({
        theme: {
          extend: {
            fontFamily: {
              'sans': ['Inter', 'system-ui', 'sans-serif'],
            },
            animation: {
              'fade-in-up': 'fadeInUp 0.6s ease-out',
              'fade-in-down': 'fadeInDown 0.6s ease-out',
              'fade-in-left': 'fadeInLeft 0.6s ease-out',
              'fade-in-right': 'fadeInRight 0.6s ease-out',
              'scale-in': 'scaleIn 0.5s ease-out',
              'float': 'float 6s ease-in-out infinite',
              'glow': 'glow 2s ease-in-out infinite alternate',
            },
            keyframes: {
              fadeInUp: {
                '0%': { opacity: '0', transform: 'translateY(30px)' },
                '100%': { opacity: '1', transform: 'translateY(0)' }
              },
              fadeInDown: {
                '0%': { opacity: '0', transform: 'translateY(-30px)' },
                '100%': { opacity: '1', transform: 'translateY(0)' }
              },
              fadeInLeft: {
                '0%': { opacity: '0', transform: 'translateX(-30px)' },
                '100%': { opacity: '1', transform: 'translateX(0)' }
              },
              fadeInRight: {
                '0%': { opacity: '0', transform: 'translateX(30px)' },
                '100%': { opacity: '1', transform: 'translateX(0)' }
              },
              scaleIn: {
                '0%': { opacity: '0', transform: 'scale(0.9)' },
                '100%': { opacity: '1', transform: 'scale(1)' }
              },
              float: {
                '0%, 100%': { transform: 'translateY(0px)' },
                '50%': { transform: 'translateY(-20px)' }
              },
              glow: {
                '0%': { boxShadow: '0 0 20px rgba(59, 130, 246, 0.2)' },
                '100%': { boxShadow: '0 0 40px rgba(59, 130, 246, 0.4)' }
              }
            }
          }
        }
      });
    }
  </script>
  
  <!-- Custom Styles -->
  <style>
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: #f1f5f9;
    }

    ::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, #2563eb 0%, #06b6d4 100%);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, #1d4ed8 0%, #0891b2 100%);
    }

    /* Selection */
    ::selection {
      background: #2563eb;
      color: white;
    }

    /* Focus styles */
    :focus-visible {
      outline: 2px solid #2563eb;
      outline-offset: 2px;
    }

    /* Premium background patterns */
    .bg-pattern-dots {
      background-image: radial-gradient(circle, rgb(148 163 184 / 0.3) 1px, transparent 1px);
      background-size: 24px 24px;
    }

    .bg-pattern-grid {
      background-image: 
        linear-gradient(rgba(148, 163, 184, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(148, 163, 184, 0.1) 1px, transparent 1px);
      background-size: 50px 50px;
    }

    /* Glass effects for premium feel */
    .glass {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    /* Premium button hover effects */
    .btn-premium {
      position: relative;
      overflow: hidden;
    }

    .btn-premium::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }

    .btn-premium:hover::before {
      left: 100%;
    }

    /* GSAP Animation Classes */
    .gsap-fade-in {
      opacity: 0;
      transform: translateY(30px);
    }

    .gsap-fade-in-left {
      opacity: 0;
      transform: translateX(-50px);
    }

    .gsap-fade-in-right {
      opacity: 0;
      transform: translateX(50px);
    }

    .gsap-scale-in {
      opacity: 0;
      transform: scale(0.8);
    }

    .gsap-stagger {
      opacity: 0;
      transform: translateY(20px);
    }

    /* Floating animations */
    @keyframes float {
      0%, 100% {
        transform: translateY(0px);
      }
      50% {
        transform: translateY(-20px);
      }
    }

    @keyframes floatReverse {
      0%, 100% {
        transform: translateY(-10px);
      }
      50% {
        transform: translateY(10px);
      }
    }

    .float {
      animation: float 6s ease-in-out infinite;
    }

    .float-reverse {
      animation: floatReverse 8s ease-in-out infinite;
    }

    /* Gradient text effects */
    .text-gradient {
      background: linear-gradient(135deg, #2563eb 0%, #06b6d4 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .text-gradient-purple {
      background: linear-gradient(135deg, #7c3aed 0%, #a855f7 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    /* Responsive adjustments */
    @media (max-width: 640px) {
      .container {
        padding-left: 1rem;
        padding-right: 1rem;
      }
    }

    /* Enhanced shadows */
    .shadow-premium {
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    .shadow-premium-lg {
      box-shadow: 0 16px 64px rgba(0, 0, 0, 0.12), 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    /* Smooth reveal animations */
    .reveal {
      clip-path: inset(100% 0 0 0);
      transition: clip-path 0.8s ease-out;
    }

    .reveal.active {
      clip-path: inset(0 0 0 0);
    }
  </style>
</head>
<body class="bg-slate-50 text-slate-900 antialiased">
  <Navigation />
  
  <main>
    <slot />
  </main>

  <!-- GSAP Scroll Animations Script -->
  <script>
    // Enhanced GSAP animations with TypeScript-safe initialization
    function initGSAPAnimations(): void {
      // Ensure GSAP is loaded
      if (typeof gsap === 'undefined' || typeof ScrollTrigger === 'undefined') {
        console.warn('GSAP not loaded, retrying...');
        setTimeout(initGSAPAnimations, 100);
        return;
      }

      // Register ScrollTrigger plugin
      gsap.registerPlugin(ScrollTrigger);

      // Set default ease
      gsap.defaults({ ease: "power2.out", duration: 0.8 });

      // Hero section animations - Type-safe implementation
      const heroElements = document.querySelectorAll('.gsap-fade-in');
      if (heroElements.length > 0) {
        gsap.fromTo(heroElements as any, 
          { 
            opacity: 0, 
            y: 50 
          },
          { 
            opacity: 1, 
            y: 0, 
            duration: 1,
            stagger: 0.2,
            ease: "power3.out"
          }
        );
      }

      // Stagger animations for cards/items - Type-safe
      const staggerElements = document.querySelectorAll('.gsap-stagger');
      if (staggerElements.length > 0) {
        gsap.fromTo(staggerElements as any, 
          { 
            opacity: 0, 
            y: 30 
          },
          { 
            opacity: 1, 
            y: 0, 
            duration: 0.6,
            stagger: 0.1,
            scrollTrigger: {
              trigger: staggerElements[0] as Element,
              start: "top 85%",
              toggleActions: "play none none reverse"
            }
          }
        );
      }

      // Scale in animations - Type-safe forEach
      const scaleElements = document.querySelectorAll('.gsap-scale-in');
      scaleElements.forEach((element: Element) => {
        gsap.fromTo(element as any, 
          { 
            opacity: 0, 
            scale: 0.8 
          },
          { 
            opacity: 1, 
            scale: 1, 
            duration: 0.6,
            scrollTrigger: {
              trigger: element,
              start: "top 80%",
              toggleActions: "play none none reverse"
            }
          }
        );
      });

      // Left/Right slide animations - Type-safe
      const leftElements = document.querySelectorAll('.gsap-fade-in-left');
      leftElements.forEach((element: Element) => {
        gsap.fromTo(element as any, 
          { 
            opacity: 0, 
            x: -50 
          },
          { 
            opacity: 1, 
            x: 0, 
            duration: 0.8,
            scrollTrigger: {
              trigger: element,
              start: "top 80%",
              toggleActions: "play none none reverse"
            }
          }
        );
      });

      const rightElements = document.querySelectorAll('.gsap-fade-in-right');
      rightElements.forEach((element: Element) => {
        gsap.fromTo(element as any, 
          { 
            opacity: 0, 
            x: 50 
          },
          { 
            opacity: 1, 
            x: 0, 
            duration: 0.8,
            scrollTrigger: {
              trigger: element,
              start: "top 80%",
              toggleActions: "play none none reverse"
            }
          }
        );
      });

      // Parallax effects for background elements - Type-safe
      const parallaxElements = document.querySelectorAll('.parallax');
      parallaxElements.forEach((element: Element) => {
        gsap.fromTo(element as any, 
          { 
            y: 0 
          },
          { 
            y: -100,
            ease: "none",
            scrollTrigger: {
              trigger: element,
              start: "top bottom",
              end: "bottom top",
              scrub: true
            }
          }
        );
      });

      // Text reveal animations - Type-safe
      const textRevealElements = document.querySelectorAll('.text-reveal');
      textRevealElements.forEach((element: Element) => {
        const tl = gsap.timeline({
          scrollTrigger: {
            trigger: element,
            start: "top 85%",
            toggleActions: "play none none reverse"
          }
        });

        tl.fromTo(element as any, 
          { 
            clipPath: "inset(100% 0 0 0)" 
          },
          { 
            clipPath: "inset(0 0 0 0)", 
            duration: 1,
            ease: "power2.out"
          }
        );
      });

      // Counter animations - Type-safe with proper casting
      const counterElements = document.querySelectorAll('.counter');
      counterElements.forEach((element: Element) => {
        const htmlElement = element as HTMLElement;
        const target = parseInt(htmlElement.getAttribute('data-target') || '0');
        
        gsap.fromTo(htmlElement, 
          { textContent: 0 },
          { 
            textContent: target,
            duration: 2,
            ease: "power2.out",
            snap: { textContent: 1 },
            scrollTrigger: {
              trigger: element,
              start: "top 80%",
              toggleActions: "play none none reverse"
            },
            onUpdate: function() {
              htmlElement.textContent = Math.ceil(Number(htmlElement.textContent));
            }
          }
        );
      });

      // Refresh ScrollTrigger
      ScrollTrigger.refresh();
      
      console.log('✅ GSAP animations initialized');
    }

    // Initialize animations when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initGSAPAnimations);
    } else {
      initGSAPAnimations();
    }

    // Re-initialize on page navigation (for SPA-like behavior)
    window.addEventListener('load', () => {
      setTimeout(() => {
        if (typeof ScrollTrigger !== 'undefined') {
          ScrollTrigger.refresh();
        }
      }, 100);
    });
  </script>
</body>
</html>