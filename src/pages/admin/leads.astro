---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

// Get leads from CMS (these are manually added)
const cmsLeads = await getCollection('leads');

// Note: Netlify Forms submissions don't automatically appear in the CMS
// They need to be manually added or we need to fetch them via API
const sortedLeads = cmsLeads.sort((a, b) => 
  new Date(b.data.createdAt).getTime() - new Date(a.data.createdAt).getTime()
);

// Group leads by status
const newLeads = sortedLeads.filter(l => l.data.status === 'new');
const contactedLeads = sortedLeads.filter(l => l.data.status === 'contacted');
const qualifiedLeads = sortedLeads.filter(l => l.data.status === 'qualified');
const closedLeads = sortedLeads.filter(l => l.data.status === 'closed');

// Calculate stats
const thisWeekLeads = sortedLeads.filter(l => {
  const leadDate = new Date(l.data.createdAt);
  const weekAgo = new Date();
  weekAgo.setDate(weekAgo.getDate() - 7);
  return leadDate > weekAgo;
});
---

<BaseLayout title="Lead Management Dashboard | WarehouseHub">
  <div id="authCheck" class="hidden">
    <div class="min-h-screen bg-gray-50 flex items-center justify-center">
      <div class="text-center">
        <h2 class="text-2xl font-bold mb-4">Authentication Required</h2>
        <p class="mb-4">Please login through the CMS first.</p>
        <a href="/admin" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold">
          Go to Admin Login
        </a>
      </div>
    </div>
  </div>

  <div id="dashboard" class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <h1 class="text-3xl font-bold text-gray-900">Lead Management Dashboard</h1>
          <div class="space-x-4">
            <a 
              href="https://app.netlify.com/sites/laec/forms" 
              target="_blank"
              class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-semibold"
            >
              View All Form Submissions
            </a>
            <button 
              id="exportCSV" 
              class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold"
            >
              Export to CSV
            </button>
            <a 
              href="/admin" 
              class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-semibold inline-block"
            >
              Back to CMS
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Important Notice -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
      <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-yellow-800">Lead Sources</h3>
            <div class="mt-2 text-sm text-yellow-700">
              <p>This dashboard shows leads manually added to the CMS. Form submissions are stored in Netlify Forms.</p>
              <p class="mt-1">To see all form submissions: <a href="https://app.netlify.com/sites/laec/forms" target="_blank" class="underline font-medium">View Netlify Forms Dashboard â†’</a></p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Stats Cards -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-600">CMS Leads</p>
              <p class="text-3xl font-bold text-gray-900">{sortedLeads.length}</p>
            </div>
            <div class="p-3 bg-blue-100 rounded-full">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-600">New Leads</p>
              <p class="text-3xl font-bold text-green-600">{newLeads.length}</p>
            </div>
            <div class="p-3 bg-green-100 rounded-full">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-600">This Week</p>
              <p class="text-3xl font-bold text-purple-600">{thisWeekLeads.length}</p>
            </div>
            <div class="p-3 bg-purple-100 rounded-full">
              <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-600">Qualified</p>
              <p class="text-3xl font-bold text-yellow-600">{qualifiedLeads.length}</p>
            </div>
            <div class="p-3 bg-yellow-100 rounded-full">
              <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Lead Conversion Funnel -->
      <div class="bg-white rounded-lg shadow p-6 mb-8">
        <h3 class="text-lg font-semibold mb-4">Lead Conversion Funnel</h3>
        <div class="space-y-4">
          <div class="flex items-center">
            <div class="w-24 text-sm text-gray-600">New</div>
            <div class="flex-1 bg-gray-200 rounded-full h-8 relative overflow-hidden">
              <div class="bg-green-500 h-full rounded-full flex items-center justify-end pr-2" 
                   style={`width: ${sortedLeads.length > 0 ? (newLeads.length / sortedLeads.length * 100) : 0}%`}>
                <span class="text-white text-sm font-semibold">{newLeads.length}</span>
              </div>
            </div>
          </div>
          <div class="flex items-center">
            <div class="w-24 text-sm text-gray-600">Contacted</div>
            <div class="flex-1 bg-gray-200 rounded-full h-8 relative overflow-hidden">
              <div class="bg-blue-500 h-full rounded-full flex items-center justify-end pr-2" 
                   style={`width: ${sortedLeads.length > 0 ? (contactedLeads.length / sortedLeads.length * 100) : 0}%`}>
                <span class="text-white text-sm font-semibold">{contactedLeads.length}</span>
              </div>
            </div>
          </div>
          <div class="flex items-center">
            <div class="w-24 text-sm text-gray-600">Qualified</div>
            <div class="flex-1 bg-gray-200 rounded-full h-8 relative overflow-hidden">
              <div class="bg-yellow-500 h-full rounded-full flex items-center justify-end pr-2" 
                   style={`width: ${sortedLeads.length > 0 ? (qualifiedLeads.length / sortedLeads.length * 100) : 0}%`}>
                <span class="text-white text-sm font-semibold">{qualifiedLeads.length}</span>
              </div>
            </div>
          </div>
          <div class="flex items-center">
            <div class="w-24 text-sm text-gray-600">Closed</div>
            <div class="flex-1 bg-gray-200 rounded-full h-8 relative overflow-hidden">
              <div class="bg-gray-600 h-full rounded-full flex items-center justify-end pr-2" 
                   style={`width: ${sortedLeads.length > 0 ? (closedLeads.length / sortedLeads.length * 100) : 0}%`}>
                <span class="text-white text-sm font-semibold">{closedLeads.length}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Filters -->
      <div class="bg-white rounded-lg shadow p-6 mb-8">
        <div class="flex flex-wrap gap-4">
          <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg">
            <option value="">All Status</option>
            <option value="new">New</option>
            <option value="contacted">Contacted</option>
            <option value="qualified">Qualified</option>
            <option value="closed">Closed</option>
          </select>
          
          <input 
            type="text" 
            id="searchFilter" 
            placeholder="Search by name, email, or company..."
            class="flex-1 px-4 py-2 border border-gray-300 rounded-lg"
          />
          
          <input 
            type="date" 
            id="dateFilter" 
            class="px-4 py-2 border border-gray-300 rounded-lg"
          />
          
          <button 
            id="clearFilters" 
            class="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Clear Filters
          </button>
        </div>
        
        <!-- Bulk Actions -->
        <div class="mt-4 flex items-center space-x-4 border-t pt-4">
          <input type="checkbox" id="selectAll" class="rounded border-gray-300">
          <label for="selectAll" class="text-sm text-gray-600">Select All</label>
          <button id="bulkEmail" class="text-sm bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded disabled:opacity-50" disabled>
            Email Selected
          </button>
          <button id="bulkExport" class="text-sm bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded disabled:opacity-50" disabled>
            Export Selected
          </button>
        </div>
      </div>

      <!-- Leads Table -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input type="checkbox" class="hidden">
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Name / Company
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Contact
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Property
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Source
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="leadsTableBody">
              {sortedLeads.map((lead: CollectionEntry<'leads'>) => (
                <tr class="lead-row hover:bg-gray-50" 
                    data-status={lead.data.status}
                    data-name={lead.data.name.toLowerCase()}
                    data-email={lead.data.email.toLowerCase()}
                    data-company={(lead.data.company || '').toLowerCase()}
                    data-date={lead.data.createdAt}>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <input type="checkbox" class="lead-checkbox rounded border-gray-300">
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(lead.data.createdAt).toLocaleDateString('en-US', { 
                      month: 'short', 
                      day: 'numeric',
                      year: 'numeric'
                    })}
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm font-medium text-gray-900">{lead.data.name}</div>
                    {lead.data.company && (
                      <div class="text-sm text-gray-500">{lead.data.company}</div>
                    )}
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm text-gray-900">
                      <a href={`mailto:${lead.data.email}`} class="text-blue-600 hover:text-blue-800">
                        {lead.data.email}
                      </a>
                    </div>
                    <div class="text-sm text-gray-500">
                      <a href={`tel:${lead.data.phone}`} class="hover:text-gray-700">
                        {lead.data.phone}
                      </a>
                    </div>
                  </td>
                  <td class="px-6 py-4 text-sm text-gray-900">
                    {lead.data.propertyInterested || '-'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full cursor-pointer ${
                      lead.data.status === 'new' ? 'bg-green-100 text-green-800' :
                      lead.data.status === 'contacted' ? 'bg-blue-100 text-blue-800' :
                      lead.data.status === 'qualified' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }`} title="Click to change status">
                      {lead.data.status}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {lead.data.source}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex items-center space-x-3">
                      <a 
                        href={`mailto:${lead.data.email}`}
                        class="text-blue-600 hover:text-blue-800"
                        title="Send Email"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                        </svg>
                      </a>
                      <a 
                        href={`tel:${lead.data.phone}`}
                        class="text-green-600 hover:text-green-800"
                        title="Call"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                        </svg>
                      </a>
                      <a 
                        href={`https://wa.me/${lead.data.phone.replace(/\D/g, '')}?text=Hi ${lead.data.name}, thanks for your interest in ${lead.data.propertyInterested || 'our warehouse'}`}
                        target="_blank"
                        class="text-green-500 hover:text-green-700"
                        title="WhatsApp"
                      >
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
                        </svg>
                      </a>
                      <button 
                        class="text-indigo-600 hover:text-indigo-800 view-details"
                        data-lead={JSON.stringify(lead.data)}
                        title="View Details"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {sortedLeads.length === 0 && (
            <div class="text-center py-12 text-gray-500">
              <p class="mb-4">No leads in CMS yet.</p>
              <a href="https://app.netlify.com/sites/laec/forms" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
                View form submissions in Netlify â†’
              </a>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  <!-- Lead Details Modal -->
  <div id="leadModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold text-gray-900" id="modalTitle">Lead Details</h3>
        <button id="closeModal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="modalContent" class="space-y-4">
        <!-- Content will be inserted here -->
      </div>
    </div>
  </div>

  <script>
    // Check authentication on client side
    document.addEventListener('DOMContentLoaded', () => {
      // Check if user is logged in via Netlify Identity
      if (window.netlifyIdentity) {
        window.netlifyIdentity.on('init', user => {
          if (!user) {
            // Not logged in, show auth message
            document.getElementById('dashboard')?.classList.add('hidden');
            document.getElementById('authCheck')?.classList.remove('hidden');
          } else {
            // Logged in, show dashboard
            document.getElementById('dashboard')?.classList.remove('hidden');
            document.getElementById('authCheck')?.classList.add('hidden');
          }
        });
      }
    });

    // Lead filtering
    const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
    const searchFilter = document.getElementById('searchFilter') as HTMLInputElement;
    const dateFilter = document.getElementById('dateFilter') as HTMLInputElement;
    const clearButton = document.getElementById('clearFilters');
    const leadRows = document.querySelectorAll('.lead-row');

    function filterLeads() {
      const status = statusFilter.value;
      const search = searchFilter.value.toLowerCase();
      const date = dateFilter.value;

      leadRows.forEach((row) => {
        const rowStatus = row.getAttribute('data-status');
        const rowName = row.getAttribute('data-name') || '';
        const rowEmail = row.getAttribute('data-email') || '';
        const rowCompany = row.getAttribute('data-company') || '';
        const rowDate = row.getAttribute('data-date') || '';

        const matchesStatus = !status || rowStatus === status;
        const matchesSearch = !search || 
          rowName.includes(search) || 
          rowEmail.includes(search) || 
          rowCompany.includes(search);
        const matchesDate = !date || rowDate.startsWith(date);

        (row as HTMLElement).style.display = 
          matchesStatus && matchesSearch && matchesDate ? '' : 'none';
      });
      
      updateBulkButtons();
    }

    statusFilter?.addEventListener('change', filterLeads);
    searchFilter?.addEventListener('input', filterLeads);
    dateFilter?.addEventListener('change', filterLeads);
    clearButton?.addEventListener('click', () => {
      statusFilter.value = '';
      searchFilter.value = '';
      dateFilter.value = '';
      filterLeads();
    });

    // Bulk actions
    const selectAll = document.getElementById('selectAll') as HTMLInputElement;
    const bulkEmail = document.getElementById('bulkEmail') as HTMLButtonElement;
    const bulkExport = document.getElementById('bulkExport') as HTMLButtonElement;

    function updateBulkButtons() {
      const visibleCheckboxes = Array.from(document.querySelectorAll('.lead-row:not([style*="display: none"]) .lead-checkbox'));
      const checkedCount = visibleCheckboxes.filter(cb => (cb as HTMLInputElement).checked).length;
      
      if (bulkEmail) bulkEmail.disabled = checkedCount === 0;
      if (bulkExport) bulkExport.disabled = checkedCount === 0;
    }

    selectAll?.addEventListener('change', (e) => {
      const isChecked = (e.target as HTMLInputElement).checked;
      const visibleCheckboxes = document.querySelectorAll('.lead-row:not([style*="display: none"]) .lead-checkbox');
      visibleCheckboxes.forEach(cb => {
        (cb as HTMLInputElement).checked = isChecked;
      });
      updateBulkButtons();
    });

    document.querySelectorAll('.lead-checkbox').forEach(cb => {
      cb.addEventListener('change', updateBulkButtons);
    });

    // Bulk email
    bulkEmail?.addEventListener('click', () => {
      const checkedLeads = Array.from(document.querySelectorAll('.lead-row .lead-checkbox:checked'))
        .map(cb => {
          const row = cb.closest('.lead-row');
          const viewBtn = row?.querySelector('.view-details') as HTMLButtonElement;
          return JSON.parse(viewBtn?.getAttribute('data-lead') || '{}');
        });
      
      const emails = checkedLeads.map(lead => lead.email).join(',');
      window.location.href = `mailto:${emails}?subject=Warehouse Inquiry Follow-up`;
    });

    // CSV Export
    function exportToCSV(leadsToExport?: any[]) {
      const rows = [
        ['Date', 'Name', 'Email', 'Phone', 'Company', 'Property', 'Status', 'Source', 'Message']
      ];

      const dataToExport = leadsToExport || Array.from(leadRows)
        .filter(row => (row as HTMLElement).style.display !== 'none')
        .map(row => {
          const viewButton = row.querySelector('.view-details') as HTMLButtonElement;
          return JSON.parse(viewButton.getAttribute('data-lead') || '{}');
        });

      dataToExport.forEach(leadData => {
        rows.push([
          new Date(leadData.createdAt).toLocaleDateString(),
          leadData.name,
          leadData.email,
          leadData.phone,
          leadData.company || '',
          leadData.propertyInterested || '',
          leadData.status,
          leadData.source,
          leadData.message.replace(/"/g, '""') // Escape quotes
        ]);
      });

      const csvContent = rows.map(row => 
        row.map(cell => `"${cell}"`).join(',')
      ).join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.setAttribute('hidden', '');
      a.setAttribute('href', url);
      a.setAttribute('download', `leads-export-${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }

    document.getElementById('exportCSV')?.addEventListener('click', () => exportToCSV());
    
    bulkExport?.addEventListener('click', () => {
      const checkedLeads = Array.from(document.querySelectorAll('.lead-row .lead-checkbox:checked'))
        .map(cb => {
          const row = cb.closest('.lead-row');
          const viewBtn = row?.querySelector('.view-details') as HTMLButtonElement;
          return JSON.parse(viewBtn?.getAttribute('data-lead') || '{}');
        });
      
      exportToCSV(checkedLeads);
    });

    // Lead Details Modal
    const modal = document.getElementById('leadModal');
    const modalContent = document.getElementById('modalContent');
    const closeModal = document.getElementById('closeModal');

    document.querySelectorAll('.view-details').forEach(button => {
      button.addEventListener('click', (e) => {
        const leadData = JSON.parse((e.target as HTMLButtonElement).closest('.view-details')?.getAttribute('data-lead') || '{}');
        
        if (modalContent) {
          modalContent.innerHTML = `
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">Name</label>
                <p class="mt-1 text-sm text-gray-900">${leadData.name}</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Company</label>
                <p class="mt-1 text-sm text-gray-900">${leadData.company || '-'}</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Email</label>
                <p class="mt-1 text-sm">
                  <a href="mailto:${leadData.email}" class="text-blue-600 hover:text-blue-800">
                    ${leadData.email}
                  </a>
                </p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Phone</label>
                <p class="mt-1 text-sm">
                  <a href="tel:${leadData.phone}" class="text-blue-600 hover:text-blue-800">
                    ${leadData.phone}
                  </a>
                </p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Property Interested</label>
                <p class="mt-1 text-sm text-gray-900">${leadData.propertyInterested || '-'}</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Source</label>
                <p class="mt-1 text-sm text-gray-900">${leadData.source}</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Status</label>
                <p class="mt-1">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    leadData.status === 'new' ? 'bg-green-100 text-green-800' :
                    leadData.status === 'contacted' ? 'bg-blue-100 text-blue-800' :
                    leadData.status === 'qualified' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }">
                    ${leadData.status}
                  </span>
                </p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Date Submitted</label>
                <p class="mt-1 text-sm text-gray-900">
                  ${new Date(leadData.createdAt).toLocaleString()}
                </p>
              </div>
            </div>
            <div class="mt-4">
              <label class="block text-sm font-medium text-gray-700">Message</label>
              <p class="mt-1 text-sm text-gray-900 bg-gray-50 p-3 rounded">
                ${leadData.message}
              </p>
            </div>
            ${leadData.notes ? `
              <div class="mt-4">
                <label class="block text-sm font-medium text-gray-700">Internal Notes</label>
                <p class="mt-1 text-sm text-gray-900 bg-yellow-50 p-3 rounded">
                  ${leadData.notes}
                </p>
              </div>
            ` : ''}
            <div class="mt-6 flex justify-end space-x-3">
              <a 
                href="/admin/#/collections/leads/entries/${leadData.createdAt}-${leadData.name.replace(/\s+/g, '-').toLowerCase()}" 
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold"
              >
                Edit in CMS
              </a>
              <button 
                onclick="window.open('mailto:${leadData.email}')" 
                class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-semibold"
              >
                Send Email
              </button>
            </div>
          `;
        }
        
        modal?.classList.remove('hidden');
      });
    });

    closeModal?.addEventListener('click', () => {
      modal?.classList.add('hidden');
    });

    // Close modal when clicking outside
    window.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal?.classList.add('hidden');
      }
    });

    // Quick status update
    document.querySelectorAll('td span[class*="rounded-full"]').forEach(statusBadge => {
      statusBadge.addEventListener('click', (e) => {
        e.stopPropagation();
        
        const currentStatus = (statusBadge.textContent || '').trim().toLowerCase();
        const statuses = ['new', 'contacted', 'qualified', 'closed'];
        const currentIndex = statuses.indexOf(currentStatus);
        const nextStatus = statuses[(currentIndex + 1) % statuses.length];
        
        // Update badge
        statusBadge.textContent = nextStatus;
        statusBadge.className = `px-2 inline-flex text-xs leading-5 font-semibold rounded-full cursor-pointer ${
          nextStatus === 'new' ? 'bg-green-100 text-green-800' :
          nextStatus === 'contacted' ? 'bg-blue-100 text-blue-800' :
          nextStatus === 'qualified' ? 'bg-yellow-100 text-yellow-800' :
          'bg-gray-100 text-gray-800'
        }`;
        
        // Update data attribute
        const row = statusBadge.closest('tr');
        if (row) {
          row.setAttribute('data-status', nextStatus);
        }
        
        // Show notification
        const notification = document.createElement('div');
        notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
        notification.textContent = 'Status updated! Remember to save changes in CMS.';
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      });
    });
  </script>
</BaseLayout>