---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

const leads = await getCollection('leads');
const sortedLeads = leads.sort((a, b) => 
  new Date(b.data.createdAt).getTime() - new Date(a.data.createdAt).getTime()
);

// Group leads by status
const newLeads = sortedLeads.filter(l => l.data.status === 'new');
const qualifiedLeads = sortedLeads.filter(l => l.data.status === 'qualified');

// Calculate stats
const thisWeekLeads = sortedLeads.filter(l => {
  const leadDate = new Date(l.data.createdAt);
  const weekAgo = new Date();
  weekAgo.setDate(weekAgo.getDate() - 7);
  return leadDate > weekAgo;
});
---

<BaseLayout title="Lead Management Dashboard | Warehouse Hub">
  <div id="authCheck" class="hidden">
    <div class="min-h-screen bg-gray-50 flex items-center justify-center">
      <div class="text-center">
        <h2 class="text-2xl font-bold mb-4">Authentication Required</h2>
        <p class="mb-4">Please login through the CMS first.</p>
        <a href="/admin" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold">
          Go to Admin Login
        </a>
      </div>
    </div>
  </div>

  <div id="dashboard" class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <h1 class="text-3xl font-bold text-gray-900">Lead Management Dashboard</h1>
          <div class="space-x-4">
            <button 
              id="exportCSV" 
              class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold"
            >
              Export to CSV
            </button>
            <a 
              href="/admin"
              class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-semibold"
            >
              Back to Admin
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Stats Cards -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-blue-600">{sortedLeads.length}</div>
          <div class="text-gray-600">Total Leads</div>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-green-600">{newLeads.length}</div>
          <div class="text-gray-600">New Leads</div>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-purple-600">{qualifiedLeads.length}</div>
          <div class="text-gray-600">Qualified</div>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-orange-600">{thisWeekLeads.length}</div>
          <div class="text-gray-600">This Week</div>
        </div>
      </div>

      <!-- Filters and Search -->
      <div class="bg-white rounded-lg shadow mb-6">
        <div class="p-6 border-b border-gray-200">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
            <h2 class="text-lg font-semibold text-gray-900">All Leads</h2>
            <div class="flex space-x-4">
              <input 
                type="text" 
                id="searchInput" 
                placeholder="Search leads..." 
                class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <select 
                id="statusFilter" 
                class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Status</option>
                <option value="new">New</option>
                <option value="contacted">Contacted</option>
                <option value="qualified">Qualified</option>
                <option value="closed">Closed</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Leads Table -->
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Contact
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Details
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Property Interest
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody id="leadsTableBody" class="bg-white divide-y divide-gray-200">
              {sortedLeads.map((lead: CollectionEntry<'leads'>) => (
                <tr class="lead-row hover:bg-gray-50" 
                    data-status={lead.data.status}
                    data-name={lead.data.name.toLowerCase()}
                    data-email={lead.data.email.toLowerCase()}
                    data-company={(lead.data.company || '').toLowerCase()}
                    data-date={lead.data.createdAt}>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(lead.data.createdAt).toLocaleDateString('en-US', { 
                      month: 'short', 
                      day: 'numeric',
                      year: 'numeric'
                    })}
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm font-medium text-gray-900">{lead.data.name}</div>
                    {lead.data.company && (
                      <div class="text-sm text-gray-500">{lead.data.company}</div>
                    )}
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm text-gray-900">
                      <a href={`mailto:${lead.data.email}`} class="text-blue-600 hover:text-blue-800">
                        {lead.data.email}
                      </a>
                    </div>
                    <div class="text-sm text-gray-500">
                      <a href={`tel:${lead.data.phone}`} class="hover:text-gray-700">
                        {lead.data.phone}
                      </a>
                    </div>
                  </td>
                  <td class="px-6 py-4 text-sm text-gray-900">
                    {lead.data.propertyInterested || '-'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      lead.data.status === 'new' ? 'bg-green-100 text-green-800' :
                      lead.data.status === 'contacted' ? 'bg-blue-100 text-blue-800' :
                      lead.data.status === 'qualified' ? 'bg-purple-100 text-purple-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {lead.data.status.charAt(0).toUpperCase() + lead.data.status.slice(1)}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button 
                      class="text-blue-600 hover:text-blue-900 mr-4"
                      onclick={`updateStatus('${lead.data.id}', 'contacted')`}
                    >
                      Mark Contacted
                    </button>
                    <button 
                      class="text-green-600 hover:text-green-900"
                      onclick={`updateStatus('${lead.data.id}', 'qualified')`}
                    >
                      Qualify
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Check if user is authenticated
    function checkAuth() {
      if (window.netlifyIdentity) {
        const user = window.netlifyIdentity.currentUser();
        if (!user) {
          document.getElementById('authCheck')?.classList.remove('hidden');
          document.getElementById('dashboard')?.classList.add('hidden');
          return false;
        }
      }
      return true;
    }

    // Search and filter functionality
    function initializeFilters() {
      const searchInput = document.getElementById('searchInput') as HTMLInputElement;
      const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
      const leadRows = document.querySelectorAll('.lead-row');

      function filterLeads() {
        const searchTerm = searchInput?.value.toLowerCase() || '';
        const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
        const selectedStatus = statusFilter?.value || '';

        leadRows.forEach(row => {
          const rowElement = row as HTMLElement;
          const name = rowElement.dataset.name || '';
          const email = rowElement.dataset.email || '';
          const company = rowElement.dataset.company || '';
          const status = rowElement.dataset.status || '';

          const matchesSearch = !searchTerm || 
            name.includes(searchTerm) || 
            email.includes(searchTerm) || 
            company.includes(searchTerm);
          
          const matchesStatus = !selectedStatus || status === selectedStatus;

          if (matchesSearch && matchesStatus) {
            rowElement.style.display = '';
          } else {
            rowElement.style.display = 'none';
          }
        });
      }

      searchInput?.addEventListener('input', filterLeads);
      statusFilter?.addEventListener('change', filterLeads);
    }

    // Export to CSV
    function exportToCSV() {
      const leads = Array.from(document.querySelectorAll('.lead-row')).map(row => {
        const rowElement = row as HTMLElement;
        const cells = row.querySelectorAll('td');
        return {
          date: cells[0]?.textContent?.trim(),
          name: rowElement.dataset.name,
          email: rowElement.dataset.email,
          company: rowElement.dataset.company,
          property: cells[3]?.textContent?.trim(),
          status: rowElement.dataset.status
        };
      });

      const csvContent = [
        ['Date', 'Name', 'Email', 'Company', 'Property Interest', 'Status'],
        ...leads.map(lead => [
          lead.date, lead.name, lead.email, lead.company, lead.property, lead.status
        ])
      ].map(row => row.join(',')).join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `leads-${new Date().toISOString().split('T')[0]}.csv`;
      a.click();
      window.URL.revokeObjectURL(url);
    }

    // Update lead status (placeholder - would need backend integration)
    function updateStatus(leadId: string, newStatus: string) {
      alert(`Would update lead ${leadId} to status: ${newStatus}`);
      // This would integrate with your CMS or API to update the lead status
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', () => {
      if (checkAuth()) {
        initializeFilters();
        document.getElementById('exportCSV')?.addEventListener('click', exportToCSV);
      }
    });

    // Handle Netlify Identity
    if (typeof window !== 'undefined' && window.netlifyIdentity) {
      window.netlifyIdentity.on('init', checkAuth);
      window.netlifyIdentity.on('login', () => {
        document.getElementById('authCheck')?.classList.add('hidden');
        document.getElementById('dashboard')?.classList.remove('hidden');
      });
      window.netlifyIdentity.on('logout', () => {
        window.location.href = '/admin';
      });
    }
  </script>
</BaseLayout>