---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const warehouses = await getCollection('warehouses');
  return warehouses.map((warehouse) => ({
    params: { slug: warehouse.data.slug },
    props: { warehouse },
  }));
}

interface Props {
  warehouse: CollectionEntry<'warehouses'>;
}

const { warehouse } = Astro.props;
const { data } = warehouse;

// Get related properties
const allWarehouses = await getCollection('warehouses');
const relatedProperties = allWarehouses
  .filter(w => w.data.slug !== data.slug && w.data.availability === 'available')
  .slice(0, 3);

// Extract city for map
const city = data.location.split(',')[0].trim();
---

<BaseLayout 
  title={`${data.title} | ${data.location} | Ariel Realty Group`}
  description={`${data.size.toLocaleString()} SF warehouse for lease in ${data.location}. ${data.price}. ${data.description.substring(0, 150)}...`}
>
  <!-- Hero Summary Stripe -->
  <section class="py-8 bg-brand text-white">
    <div class="container container-marketing">
      <div class="grid lg:grid-cols-4 gap-6 items-center reveal">
        <div class="lg:col-span-2">
          <div class="flex items-center gap-3 mb-2">
            <span class={`chip ${data.availability === 'available' ? 'active' : ''}`} 
                  style={data.availability === 'available' ? 'background: #2EB67D; color: white; border-color: #2EB67D;' : ''}>
              {data.availability === 'available' ? 'Available' : data.availability}
            </span>
            {data.featured && (
              <span class="chip" style="background: #F59E0B; color: white; border-color: #F59E0B;">
                Featured
              </span>
            )}
          </div>
          <h1 class="text-white mb-3">{data.title}</h1>
          <p class="text-white/80 flex items-center text-lg">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
            </svg>
            {data.address}
          </p>
        </div>
        
        <div class="text-center">
          <div class="text-3xl font-bold text-white mb-1">{data.size.toLocaleString()}</div>
          <div class="text-white/60">Square Feet</div>
        </div>
        
        <div class="text-center">
          <div class="text-3xl font-bold text-white mb-1">{data.price}</div>
          <div class="text-white/60">Per SF/Year</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Key Specs Stripe -->
  <section class="py-6 bg-surface-alt border-b border-black/5">
    <div class="container container-marketing">
      <div class="grid grid-cols-3 gap-6 text-center reveal">
        <div>
          <div class="text-lg font-semibold text-brand mb-1">32 ft</div>
          <div class="text-sm text-muted">Clear Height</div>
        </div>
        <div>
          <div class="text-lg font-semibold text-brand mb-1">12</div>
          <div class="text-sm text-muted">Dock Doors</div>
        </div>
        <div>
          <div class="text-lg font-semibold text-brand mb-1">480V</div>
          <div class="text-sm text-muted">3-Phase Power</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <section class="section">
    <div class="container container-marketing">
      <div class="grid lg:grid-cols-3 gap-12">
        <!-- Left Column -->
        <div class="lg:col-span-2 space-y-12">
          <!-- Image Gallery -->
          <div class="reveal">
            <h2 class="mb-6">Property Photos</h2>
            {data.images && data.images.length > 0 ? (
              <div class="space-y-4">
                <!-- Main Image -->
                <div class="relative">
                  <img 
                    id="main-image"
                    src={data.images[0]} 
                    alt={data.title}
                    class="w-full h-96 object-cover rounded-card"
                  />
                  <div class="absolute inset-0 bg-black/0 hover:bg-black/5 transition-colors rounded-card cursor-pointer" 
                       onclick="openLightbox(0)">
                    <div class="absolute bottom-4 right-4 bg-black/50 text-white px-3 py-2 rounded text-sm">
                      <span id="current-image">1</span> / {data.images.length}
                    </div>
                  </div>
                </div>
                
                <!-- Thumbnails -->
                {data.images.length > 1 && (
                  <div class="grid grid-cols-4 gap-2">
                    {data.images.map((image, index) => (
                      <button 
                        class={`thumbnail aspect-square rounded overflow-hidden ${index === 0 ? 'ring-2 ring-brand' : ''}`}
                        onclick={`changeMainImage(${index})`}
                      >
                        <img 
                          src={image} 
                          alt={`${data.title} - Image ${index + 1}`}
                          class="w-full h-full object-cover hover:scale-105 transition-transform"
                        />
                      </button>
                    ))}
                  </div>
                )}
              </div>
            ) : (
              <div class="w-full h-96 bg-surface-alt rounded-card flex items-center justify-center">
                <div class="text-center">
                  <svg class="w-16 h-16 text-muted mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <p class="text-muted">Photos coming soon</p>
                </div>
              </div>
            )}
          </div>

          <!-- Property Specifications -->
          <div class="reveal">
            <h2 class="mb-6">Property Specifications</h2>
            <div class="card">
              <div class="card-body">
                <table class="w-full">
                  <tbody class="space-y-4">
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Total Size</td>
                      <td class="py-3 text-right font-semibold">{data.size.toLocaleString()} SF</td>
                    </tr>
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Lease Rate</td>
                      <td class="py-3 text-right font-semibold">{data.price}</td>
                    </tr>
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Address</td>
                      <td class="py-3 text-right">{data.address}</td>
                    </tr>
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Clear Height</td>
                      <td class="py-3 text-right">32 feet</td>
                    </tr>
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Dock Doors</td>
                      <td class="py-3 text-right">12 dock doors</td>
                    </tr>
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Power</td>
                      <td class="py-3 text-right">480V 3-phase</td>
                    </tr>
                    <tr class="border-b border-black/5">
                      <td class="py-3 font-medium text-muted">Parking</td>
                      <td class="py-3 text-right">50+ spaces</td>
                    </tr>
                    <tr>
                      <td class="py-3 font-medium text-muted">Availability</td>
                      <td class="py-3 text-right">
                        <span class={`chip ${data.availability === 'available' ? 'active' : ''}`}>
                          {data.availability === 'available' ? 'Available Now' : data.availability}
                        </span>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- Features -->
          {data.features && data.features.length > 0 && (
            <div class="reveal">
              <h2 class="mb-6">Features & Amenities</h2>
              <div class="grid md:grid-cols-2 gap-4">
                {data.features.map(feature => (
                  <div class="flex items-center p-4 bg-surface-alt rounded-card">
                    <svg class="w-5 h-5 text-accent mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span class="font-medium">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <!-- Description -->
          <div class="reveal">
            <h2 class="mb-6">Property Description</h2>
            <div class="prose prose-lg max-w-none">
              <p class="text-muted leading-relaxed">{data.description}</p>
            </div>
          </div>

          <!-- Map -->
          <div class="reveal">
            <h2 class="mb-6">Location & Access</h2>
            <div class="relative h-96 bg-surface-alt rounded-card overflow-hidden">
              <!-- Static Map Placeholder -->
              <div class="w-full h-full flex items-center justify-center">
                <div class="text-center">
                  <svg class="w-16 h-16 text-muted mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  <p class="text-muted mb-4">Interactive map loading...</p>
                  <p class="text-sm text-muted">{data.address}</p>
                </div>
              </div>
              
              <!-- Map will be loaded here -->
              <div id="map-container" class="hidden w-full h-full"></div>
            </div>
          </div>
        </div>

        <!-- Right Column - Agent Card -->
        <div class="space-y-8">
          <!-- Agent Contact Card -->
          <div class="card reveal sticky top-32">
            <div class="card-body text-center">
              <div class="w-20 h-20 bg-gradient-to-br from-brand to-accent rounded-full flex items-center justify-center mx-auto mb-4">
                <span class="text-2xl font-bold text-white">AR</span>
              </div>
              
              <h3 class="mb-2">Ariel Realty Group</h3>
              <p class="text-muted mb-6">Licensed Industrial Specialist</p>
              
              <div class="space-y-4 mb-6">
                <a href="tel:+19549379667" class="btn btn-primary w-full btn-lg">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  Call (954) 937-9667
                </a>
                
                <button id="request-info-btn" class="btn btn-secondary w-full">
                  Request Information
                  <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                  </svg>
                </button>
              </div>
              
              <div class="text-sm text-muted space-y-2">
                <div class="flex items-center justify-center">
                  <svg class="w-4 h-4 mr-2 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Free Tenant Representation
                </div>
                <div class="flex items-center justify-center">
                  <svg class="w-4 h-4 mr-2 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  24hr Response Time
                </div>
                <div class="flex items-center justify-center">
                  <svg class="w-4 h-4 mr-2 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Licensed in Florida
                </div>
              </div>
            </div>
          </div>

          <!-- Quick Request Form -->
          <div id="request-form" class="card hidden">
            <div class="card-body">
              <h3 class="mb-6">Request Information</h3>
              <form name="property-inquiry" method="POST" data-netlify="true" action="/contact" class="space-y-4">
                <input type="hidden" name="form-name" value="property-inquiry" />
                <input type="hidden" name="property" value={data.title} />
                <input type="hidden" name="source" value={`property-${data.slug}`} />
                <input type="hidden" name="bot-field" style="display: none;" />
                
                <div class="form-group">
                  <label class="form-label" for="name">Name</label>
                  <input type="text" id="name" name="name" class="form-input" required />
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="phone">Phone</label>
                  <input type="tel" id="phone" name="phone" class="form-input" required />
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="email">Email</label>
                  <input type="email" id="email" name="email" class="form-input" required />
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="message">Message</label>
                  <textarea id="message" name="message" rows="3" class="form-textarea" 
                            placeholder="I'm interested in this property. Please contact me with more details."></textarea>
                </div>
                
                <button type="submit" class="btn btn-primary w-full">
                  Send Request
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                  </svg>
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Related Properties -->
  {relatedProperties.length > 0 && (
    <section class="section bg-surface-alt">
      <div class="container container-marketing">
        <div class="text-center mb-12 reveal">
          <h2 class="mb-6">Similar Properties</h2>
          <p class="text-xl text-muted max-w-3xl mx-auto">
            Other warehouse spaces that might interest you
          </p>
        </div>
        
        <div class="grid md:grid-cols-3 gap-8">
          {relatedProperties.map((property, index) => (
            <div class="card reveal" style={`animation-delay: ${index * 100}ms`}>
              <div class="relative">
                {property.data.images && property.data.images[0] ? (
                  <img 
                    src={property.data.images[0]} 
                    alt={property.data.title}
                    class="w-full h-48 object-cover"
                    loading="lazy"
                  />
                ) : (
                  <div class="w-full h-48 bg-surface-alt flex items-center justify-center">
                    <svg class="w-12 h-12 text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                  </div>
                )}
                <div class="absolute top-4 left-4">
                  <span class="chip active">Available</span>
                </div>
              </div>
              
              <div class="card-body">
                <h3 class="mb-3">
                  <a href={`/properties/${property.data.slug}`} class="text-brand hover:text-accent transition-colors">
                    {property.data.title}
                  </a>
                </h3>
                
                <p class="text-muted mb-4 flex items-center">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  </svg>
                  {property.data.location}
                </p>
                
                <div class="flex items-center justify-between mb-6">
                  <div>
                    <div class="text-lg font-semibold">{property.data.size.toLocaleString()} SF</div>
                    <div class="text-sm text-muted">{property.data.price}</div>
                  </div>
                </div>
                
                <div class="flex gap-3">
                  <a href={`/properties/${property.data.slug}`} class="btn btn-secondary flex-1">
                    View Details
                  </a>
                  <a href="tel:+19549379667" class="btn btn-primary">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Photo Lightbox -->
  <div id="lightbox" class="fixed inset-0 bg-black/90 z-50 hidden flex items-center justify-center">
    <div class="relative max-w-7xl max-h-full p-4">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-full object-contain" />
      
      <button id="close-lightbox" class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors">
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      {data.images && data.images.length > 1 && (
        <>
          <button id="prev-image" class="absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 transition-colors">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          
          <button id="next-image" class="absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 transition-colors">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </>
      )}
    </div>
  </div>

  <script define:vars={{ images: data.images || [] }}>
    let currentImageIndex = 0;
    
    // Request form toggle
    document.getElementById('request-info-btn')?.addEventListener('click', () => {
      const form = document.getElementById('request-form');
      form.classList.toggle('hidden');
      if (!form.classList.contains('hidden')) {
        form.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    });
    
    // Gallery functions
    function changeMainImage(index) {
      currentImageIndex = index;
      const mainImage = document.getElementById('main-image');
      const currentCounter = document.getElementById('current-image');
      
      if (mainImage && images[index]) {
        mainImage.src = images[index];
        if (currentCounter) {
          currentCounter.textContent = index + 1;
        }
      }
      
      // Update thumbnail active state
      document.querySelectorAll('.thumbnail').forEach((thumb, i) => {
        if (i === index) {
          thumb.classList.add('ring-2', 'ring-brand');
        } else {
          thumb.classList.remove('ring-2', 'ring-brand');
        }
      });
    }
    
    function openLightbox(index) {
      if (!images[index]) return;
      
      currentImageIndex = index;
      const lightbox = document.getElementById('lightbox');
      const lightboxImage = document.getElementById('lightbox-image');
      
      if (lightbox && lightboxImage) {
        lightboxImage.src = images[index];
        lightbox.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    }
    
    function closeLightbox() {
      const lightbox = document.getElementById('lightbox');
      if (lightbox) {
        lightbox.classList.add('hidden');
        document.body.style.overflow = '';
      }
    }
    
    function nextImage() {
      const nextIndex = (currentImageIndex + 1) % images.length;
      openLightbox(nextIndex);
    }
    
    function prevImage() {
      const prevIndex = currentImageIndex === 0 ? images.length - 1 : currentImageIndex - 1;
      openLightbox(prevIndex);
    }
    
    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('close-lightbox')?.addEventListener('click', closeLightbox);
      document.getElementById('next-image')?.addEventListener('click', nextImage);
      document.getElementById('prev-image')?.addEventListener('click', prevImage);
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        const lightbox = document.getElementById('lightbox');
        if (!lightbox?.classList.contains('hidden')) {
          switch (e.key) {
            case 'Escape':
              closeLightbox();
              break;
            case 'ArrowLeft':
              prevImage();
              break;
            case 'ArrowRight':
              nextImage();
              break;
          }
        }
      });
      
      // Click outside to close
      document.getElementById('lightbox')?.addEventListener('click', (e) => {
        if (e.target.id === 'lightbox') {
          closeLightbox();
        }
      });
    });
    
    // Make functions global for onclick handlers
    window.changeMainImage = changeMainImage;
    window.openLightbox = openLightbox;
  </script>
</BaseLayout>