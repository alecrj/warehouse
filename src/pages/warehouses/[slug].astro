---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import ImageGallery from '../../components/ImageGallery.astro';
import StandardizedContactForm from '../../components/StandardizedContactForm.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const warehouses = await getCollection('warehouses');
  return warehouses.map((warehouse) => ({
    params: { slug: warehouse.data.slug },
    props: { warehouse },
  }));
}

interface Props {
  warehouse: CollectionEntry<'warehouses'>;
}

const { warehouse } = Astro.props;
const { data } = warehouse;

// FIXED ADDRESS HANDLING - handles both new and legacy formats properly
function getDisplayAddress(data: any) {
  // New format (preferred) - if we have separate city, state fields
  if (data.city && data.state) {
    const streetAddress = data.address || 'Available upon request';
    const displayLocation = `${data.city}, ${data.state}`;
    const zipCode = data.zipCode ? ` ${data.zipCode}` : '';
    const fullAddress = streetAddress !== 'Available upon request' 
      ? `${streetAddress}, ${displayLocation}${zipCode}`
      : displayLocation;
    
    return {
      streetAddress: streetAddress,
      city: data.city,
      state: data.state,
      zipCode: data.zipCode || '',
      fullAddress: fullAddress,
      displayLocation: displayLocation
    };
  }
  
  // Legacy format - fix the parsing
  const location = data.location || '';
  const address = data.address || '';
  
  // FIXED: Better parsing for legacy data
  let city, state;
  
  if (location.includes(',')) {
    // Has comma - split properly
    const parts = location.split(',').map((p: string) => p.trim());
    city = parts[0];
    state = parts[1] || 'FL';
  } else {
    // No comma - assume it's just city name
    city = location;
    state = 'FL'; // Default to Florida
  }
  
  const displayLocation = `${city}, ${state}`;
  
  // FIXED: Build complete address for Google Maps
  let fullAddress;
  if (address && address !== city && address !== location && address.length > 3) {
    // We have a real street address
    const zipCode = data.zipCode ? ` ${data.zipCode}` : '';
    fullAddress = `${address}, ${city}, ${state}${zipCode}`;
  } else {
    // No street address, just use city/state
    fullAddress = displayLocation;
  }
  
  // Street address for display
  let streetAddress = address;
  if (!streetAddress || streetAddress === city || streetAddress === location || streetAddress.length < 4) {
    streetAddress = 'Available upon request';
  }
  
  return {
    streetAddress: streetAddress,
    city: city,
    state: state,
    zipCode: data.zipCode || '',
    fullAddress: fullAddress,
    displayLocation: displayLocation
  };
}

const addressInfo = getDisplayAddress(data);

// Get related properties
const allWarehouses = await getCollection('warehouses');
const relatedProperties = allWarehouses
  .filter(w => w.data.slug !== data.slug && w.data.availability === 'available')
  .slice(0, 3);

// FIXED county determination to use proper city name
const getCounty = (cityName: string) => {
  const city = cityName.toLowerCase();
  if (city.includes('miami') || city.includes('doral') || city.includes('homestead') || city.includes('hialeah')) {
    return 'Miami-Dade';
  } else if (city.includes('hollywood') || city.includes('fort lauderdale') || city.includes('pompano') || city.includes('plantation') || city.includes('davie')) {
    return 'Broward';
  } else if (city.includes('west palm beach') || city.includes('boca raton') || city.includes('delray beach') || city.includes('boynton beach')) {
    return 'Palm Beach';
  }
  return data.county || '';
};

const county = getCounty(addressInfo.city);
---

<BaseLayout 
  title={`${data.title} | ${addressInfo.city} | Warehouse Locating`}
  description={`${data.size.toLocaleString()} SF warehouse for lease in ${addressInfo.city}. ${data.price}. ${data.description.substring(0, 150)}...`}
>
  <Navigation />
  
  <main>
    <!-- Clean Hero Section -->
    <section class="pt-20 pb-12 bg-gradient-to-br from-slate-900 to-slate-800">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <!-- Breadcrumb -->
        <nav class="mb-6">
          <ol class="flex items-center space-x-2 text-sm text-gray-300">
            <li><a href="/" class="hover:text-white">Home</a></li>
            <li><span class="text-gray-500">/</span></li>
            <li><a href="/warehouses" class="hover:text-white">Properties</a></li>
            <li><span class="text-gray-500">/</span></li>
            <li class="text-primary-400">{data.title}</li>
          </ol>
        </nav>

        <!-- Property Header -->
        <div class="text-center max-w-4xl mx-auto">
          
          <!-- Status & Featured Badges -->
          <div class="flex flex-wrap justify-center gap-3 mb-4">
            <span class={`px-4 py-2 rounded-full text-sm font-semibold ${
              data.availability === 'available' 
                ? 'bg-green-500 text-white' 
                : 'bg-yellow-500 text-white'
            }`}>
              {data.availability === 'available' ? '✓ Available Now' : '⏳ Pending'}
            </span>
            {data.featured && (
              <span class="px-4 py-2 bg-gradient-to-r from-yellow-400 to-yellow-500 text-white rounded-full text-sm font-semibold">
                ⭐ Featured
              </span>
            )}
          </div>

          <!-- Title & Location -->
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 leading-tight">
            {data.title}
          </h1>
          
          <div class="flex items-center justify-center text-lg text-gray-300 mb-6">
            <svg class="w-5 h-5 mr-2 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
            <span>{addressInfo.displayLocation}</span>
            {county && <span class="ml-2 text-primary-300">• {county} County</span>}
          </div>

          <!-- Key Stats Grid -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-3xl mx-auto">
            <div class="bg-white/10 rounded-xl p-4 text-center backdrop-blur-sm">
              <div class="text-2xl font-bold text-white">{data.price}</div>
              <div class="text-gray-300 text-sm">Lease Rate</div>
            </div>
            <div class="bg-white/10 rounded-xl p-4 text-center backdrop-blur-sm">
              <div class="text-2xl font-bold text-white">{data.size.toLocaleString()}</div>
              <div class="text-gray-300 text-sm">Square Feet</div>
            </div>
            <div class="bg-white/10 rounded-xl p-4 text-center backdrop-blur-sm">
              <div class="text-2xl font-bold text-white">{addressInfo.city}</div>
              <div class="text-gray-300 text-sm">City</div>
            </div>
            <div class="bg-white/10 rounded-xl p-4 text-center backdrop-blur-sm">
              <div class="text-2xl font-bold text-white">24/7</div>
              <div class="text-gray-300 text-sm">Access</div>
            </div>
          </div>

          <!-- Contact Buttons -->
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-md mx-auto mt-8">
            <a 
              href="tel:+19549379667"
              class="bg-primary-600 text-white py-4 px-6 rounded-xl font-semibold hover:bg-primary-700 transition-colors flex items-center justify-center gap-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
              </svg>
              <span class="hidden sm:inline">(954) 937-9667</span>
              <span class="sm:hidden">Call Us</span>
            </a>
            
            <a 
              href="mailto:info@warehouselocating.com"
              class="bg-white text-gray-900 py-4 px-6 rounded-xl font-semibold hover:bg-gray-100 transition-colors flex items-center justify-center gap-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
              <span class="hidden sm:inline">info@warehouselocating</span>
              <span class="sm:hidden">Email</span>
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <section class="py-12 bg-white">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="space-y-12">
          
          <!-- Property Images -->
          {data.images && data.images.length > 0 && (
            <div>
              <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Property Photos</h2>
              <div class="bg-gray-100 rounded-2xl overflow-hidden">
                <ImageGallery images={data.images} title={data.title} />
              </div>
            </div>
          )}
          
          <!-- Description -->
          <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Property Description</h2>
            <div class="prose max-w-none text-center">
              <p class="text-gray-700 leading-relaxed text-lg">{data.description}</p>
            </div>
          </div>
          
          <!-- Features -->
          {data.features && data.features.length > 0 && (
            <div>
              <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Key Features</h2>
              <div class="grid md:grid-cols-2 gap-4 max-w-2xl mx-auto">
                {data.features.map((feature) => (
                  <div class="flex items-center gap-3 p-4 bg-gray-50 rounded-lg">
                    <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                      <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                    </div>
                    <span class="text-gray-800 font-medium">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <!-- Property Specs -->
          <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Property Details</h2>
            <div class="grid md:grid-cols-2 gap-6 max-w-2xl mx-auto">
              
              <!-- ENHANCED Location Info (ONLY CHANGE) -->
              <div class="bg-gray-50 rounded-xl p-6">
                <h3 class="font-semibold text-gray-900 mb-4 text-center">Location Information</h3>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Address:</span>
                    <span class="font-medium text-gray-900 text-right">{addressInfo.streetAddress}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">City:</span>
                    <span class="font-medium text-gray-900">{addressInfo.city}</span>
                  </div>
                  {county && (
                    <div class="flex justify-between">
                      <span class="text-gray-600">County:</span>
                      <span class="font-medium text-gray-900">{county} County</span>
                    </div>
                  )}
                  <div class="flex justify-between">
                    <span class="text-gray-600">State:</span>
                    <span class="font-medium text-gray-900">{addressInfo.state}</span>
                  </div>
                  {addressInfo.zipCode && (
                    <div class="flex justify-between">
                      <span class="text-gray-600">ZIP Code:</span>
                      <span class="font-medium text-gray-900">{addressInfo.zipCode}</span>
                    </div>
                  )}
                  <!-- NEW: Google Maps Button -->
                  <div class="pt-3 border-t border-gray-200">
                    <a 
                      href={`https://www.google.com/maps/search/${encodeURIComponent(addressInfo.fullAddress)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="w-full flex items-center justify-center gap-2 bg-blue-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors text-sm"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                      </svg>
                      View on Google Maps
                    </a>
                  </div>
                </div>
              </div>

              <!-- Property Specs -->
              <div class="bg-gray-50 rounded-xl p-6">
                <h3 class="font-semibold text-gray-900 mb-4 text-center">Property Specifications</h3>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Total Size:</span>
                    <span class="font-medium text-gray-900">{data.size.toLocaleString()} SF</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Lease Rate:</span>
                    <span class="font-medium text-gray-900">{data.price}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Availability:</span>
                    <span class={`font-medium ${data.availability === 'available' ? 'text-green-600' : 'text-yellow-600'}`}>
                      {data.availability === 'available' ? 'Available Now' : 'Pending'}
                    </span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Access:</span>
                    <span class="font-medium text-gray-900">24/7</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Actions -->
          <div class="flex flex-col sm:flex-row gap-4 pt-8 border-t max-w-md mx-auto">
            <button 
              onclick="window.print()"
              class="flex-1 flex items-center justify-center gap-2 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
              </svg>
              Print Details
            </button>
            <button 
              onclick="navigator.share ? navigator.share({title: document.title, url: window.location.href}) : navigator.clipboard.writeText(window.location.href).then(() => alert('Link copied!'))"
              class="flex-1 flex items-center justify-center gap-2 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
              </svg>
              Share Property
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Contact Form -->
    <section class="py-12 bg-gray-50" id="contact-form">
      <div class="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-8">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">
            Interested in This Property?
          </h2>
          <p class="text-lg text-gray-600">
            Get more information about {data.title}. We'll respond within 24 hours.
          </p>
        </div>
        
        <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
          <div class="bg-primary-600 p-6 text-center">
            <h3 class="text-xl font-bold text-white mb-2">Contact Our Team</h3>
            <p class="text-primary-100">Professional warehouse representation at no cost to you</p>
          </div>
          <div class="p-8">
            <form name="property-inquiry" method="POST" data-netlify="true" class="space-y-6">
              <input type="hidden" name="form-name" value="property-inquiry" />
              <input type="hidden" name="property" value={data.title} />
              <input type="hidden" name="source" value="property-page" />
              
              <!-- Contact Info -->
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                <div class="flex items-center gap-3 p-4 bg-blue-50 rounded-lg">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                  </svg>
                  <div>
                    <div class="font-semibold text-gray-900">Call Now</div>
                    <a href="tel:+19549379667" class="text-blue-600 hover:text-blue-700">(954) 937-9667</a>
                  </div>
                </div>
                
                <div class="flex items-center gap-3 p-4 bg-blue-50 rounded-lg">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                  </svg>
                  <div>
                    <div class="font-semibold text-gray-900">Email Agent</div>
                    <a href="mailto:info@warehouselocating.com" class="text-blue-600 hover:text-blue-700">Email Agent</a>
                  </div>
                </div>
              </div>
              
              <!-- Name & Email -->
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label for="name" class="block text-sm font-semibold text-gray-700 mb-2">
                    Full Name *
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                    placeholder="Your full name"
                  />
                </div>

                <div>
                  <label for="email" class="block text-sm font-semibold text-gray-700 mb-2">
                    Email Address *
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                    placeholder="your.email@company.com"
                  />
                </div>
              </div>

              <!-- Phone & Company -->
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label for="phone" class="block text-sm font-semibold text-gray-700 mb-2">
                    Phone Number *
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                    placeholder="(555) 123-4567"
                  />
                </div>

                <div>
                  <label for="company" class="block text-sm font-semibold text-gray-700 mb-2">
                    Company
                  </label>
                  <input
                    type="text"
                    id="company"
                    name="company"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                    placeholder="Company Name"
                  />
                </div>
              </div>

              <!-- Message -->
              <div>
                <label for="message" class="block text-sm font-semibold text-gray-700 mb-2">
                  Message
                </label>
                <textarea
                  id="message"
                  name="message"
                  rows="4"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors resize-none"
                  placeholder="Tell us about your requirements or ask any questions about this property..."
                ></textarea>
              </div>

              <!-- Submit Button -->
              <div class="text-center">
                <button
                  type="submit"
                  class="w-full bg-primary-600 text-white py-4 px-8 rounded-lg font-semibold hover:bg-primary-700 transition-colors focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
                >
                  Send Inquiry About This Property
                </button>
                <p class="mt-3 text-sm text-gray-500">
                  We'll respond within 24 hours with detailed information and tour availability.
                </p>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>

    <!-- Related Properties -->
    {relatedProperties.length > 0 && (
      <section class="py-12 bg-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="text-center mb-12">
            <h2 class="text-3xl font-bold text-gray-900 mb-4">Similar Properties</h2>
            <p class="text-lg text-gray-600">Other warehouse options that might interest you</p>
          </div>
          
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {relatedProperties.map((property) => (
              <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
                <div class="relative h-48">
                  <img 
                    src={property.data.images && property.data.images[0] ? property.data.images[0] : '/placeholder.jpg'}
                    alt={property.data.title}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                  <div class="absolute top-4 left-4">
                    <span class="px-3 py-1 bg-green-500 text-white rounded-full text-xs font-semibold">
                      Available
                    </span>
                  </div>
                </div>
                
                <div class="p-6">
                  <div class="flex justify-between items-center mb-3">
                    <span class="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                      {property.data.size.toLocaleString()} SF
                    </span>
                    <span class="text-lg font-bold text-primary-600">{property.data.price}</span>
                  </div>
                  
                  <h3 class="text-lg font-bold text-gray-900 mb-2">{property.data.title}</h3>
                  <p class="text-gray-600 mb-4 flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                    </svg>
                    {property.data.location}
                  </p>
                  
                  <a 
                    href={`/warehouses/${property.data.slug}`}
                    class="w-full bg-primary-600 text-white py-3 rounded-lg font-semibold hover:bg-primary-700 transition-colors text-center block"
                  >
                    View Details
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    )}
  </main>
  
  <Footer />

  <style>
    @media print {
      .no-print, nav, footer, .sticky {
        display: none !important;
      }
    }
  </style>
</BaseLayout>