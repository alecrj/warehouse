---
// Updated warehouses listing page with video background hero
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

// Define proper types
interface WarehouseData {
  title: string;
  location: string;
  price: string;
  size: number;
  description: string;
  images?: string[];
  features?: string[];
  featured?: boolean;
  availability?: string;
  slug: string;
}

interface Warehouse {
  data: WarehouseData;
}

// Get warehouse data from CMS
let allWarehouses: Warehouse[] = [];
let availableWarehouses: Warehouse[] = [];
let pendingWarehouses: Warehouse[] = [];
let totalSqFt = 0;
let averageSize = 0;

try {
  allWarehouses = await getCollection('warehouses');
  availableWarehouses = allWarehouses.filter((w: Warehouse) => w.data.availability === 'available');
  pendingWarehouses = allWarehouses.filter((w: Warehouse) => w.data.availability === 'pending');
  totalSqFt = allWarehouses.reduce((sum: number, w: Warehouse) => sum + (w.data.size || 0), 0);
  averageSize = allWarehouses.length > 0 ? Math.round(totalSqFt / allWarehouses.length) : 0;
} catch (error) {
  console.log('No warehouse data yet:', error);
}

// Get search parameters
const url = Astro.url;
const minSize = url.searchParams.get('min_size');
const maxSize = url.searchParams.get('max_size');
const county = url.searchParams.get('county');
const availability = url.searchParams.get('availability');

const pageTitle = 'Available Warehouse Properties | South Florida Industrial Leasing';
const pageDescription = 'Browse premium warehouse and industrial properties across South Florida. Expert tenant representation with zero fees. Modern facilities, competitive rates.';
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <Navigation />
  
  <main>
    <!-- Enhanced Hero Section with Video Background -->
    <section class="relative min-h-screen overflow-hidden flex items-center">
      <!-- Video Background -->
      <video 
        autoplay 
        muted 
        loop 
        playsinline
        class="absolute inset-0 w-full h-full object-cover"
      >
        <source src="/videos/warehousevid.mp4" type="video/mp4">
        <!-- Fallback for browsers that don't support video -->
      </video>
      
      <!-- Video Overlay -->
      <div class="absolute inset-0 bg-black/60"></div>
      
      <!-- Gradient Overlay for extra depth -->
      <div class="absolute inset-0 bg-gradient-to-br from-slate-900/80 via-slate-800/60 to-slate-900/80"></div>
      
      <!-- Background Elements (subtle over video) -->
      <div class="absolute inset-0">
        <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-primary-500/20 rounded-full blur-3xl animate-float"></div>
        <div class="absolute bottom-1/4 right-1/4 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl animate-float-reverse"></div>
      </div>
      
      <div class="relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <div class="text-center">
          <h1 class="text-4xl sm:text-5xl lg:text-6xl font-black text-white leading-tight tracking-tight mb-6 animate-on-scroll drop-shadow-2xl">
            BROWSE OUR
            <span class="block bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent">
              PROPERTIES
            </span>
          </h1>
          <p class="text-lg lg:text-xl text-gray-200 max-w-4xl mx-auto leading-relaxed mb-2 animate-on-scroll drop-shadow-lg">
            Premium warehouse and industrial properties across South Florida.
          </p>
          <p class="text-base text-gray-300 leading-relaxed mb-8 max-w-3xl mx-auto animate-on-scroll drop-shadow-lg">
            Expert representation. Zero fees. Perfect matches.
          </p>
          
          <!-- Enhanced Statistics Cards with Video Background -->
          <div class="grid grid-cols-2 lg:grid-cols-4 gap-6 animate-on-scroll mt-12">
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-primary-200 transition-colors duration-300">
                  {allWarehouses.length}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Total Properties</div>
              </div>
            </div>
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-green-200 transition-colors duration-300">
                  {availableWarehouses.length}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Available Now</div>
              </div>
            </div>
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-blue-200 transition-colors duration-300">
                  {totalSqFt.toLocaleString()}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Total SQ FT</div>
              </div>
            </div>
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-cyan-200 transition-colors duration-300">
                  {averageSize.toLocaleString()}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Avg Size</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Enhanced Search & Filters Section -->
    <section class="py-12 bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Search Bar -->
        <div class="max-w-2xl mx-auto mb-8">
          <div class="relative">
            <input 
              type="text" 
              id="search-input"
              placeholder="Search by location, features, or property name..." 
              class="w-full px-6 py-4 pl-12 text-lg border border-gray-300 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500 shadow-sm"
            >
            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
          </div>
        </div>
        
        <!-- Filter Buttons -->
        <div class="flex flex-wrap justify-center gap-3 mb-8">
          <button 
            class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors filter-btn font-medium"
            data-filter="clear"
            type="button"
          >
            All Properties
          </button>
          <button 
            class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors filter-btn font-medium"
            data-filter="availability"
            data-value="available"
            type="button"
          >
            Available Now
          </button>
          <button 
            class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors filter-btn font-medium"
            data-filter="size"
            data-value="small"
            type="button"
          >
            Under 10k SF
          </button>
          <button 
            class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors filter-btn font-medium"
            data-filter="size"
            data-value="medium"
            type="button"
          >
            10k-50k SF
          </button>
          <button 
            class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors filter-btn font-medium"
            data-filter="size"
            data-value="large"
            type="button"
          >
            50k+ SF
          </button>
          <button 
            class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors filter-btn font-medium"
            data-filter="featured"
            data-value="true"
            type="button"
          >
            Featured Only
          </button>
        </div>

        <!-- Results Counter -->
        <div class="text-center mb-8">
          <p id="results-counter" class="text-gray-600 text-lg">
            Showing <span id="visible-count">{allWarehouses.length}</span> of <span id="total-count">{allWarehouses.length}</span> properties
          </p>
        </div>
      </div>
    </section>

    <!-- Properties Grid -->
    <section class="py-12 bg-gray-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div id="properties-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {allWarehouses.map((warehouse) => (
            <div 
              class="property-card bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 flex flex-col"
              data-warehouse={JSON.stringify(warehouse.data)}
            >
              <!-- Image Section -->
              <div class="relative h-64 overflow-hidden">
                <img 
                  src={warehouse.data.images && warehouse.data.images[0] ? warehouse.data.images[0] : '/placeholder.jpg'}
                  alt={warehouse.data.title}
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                />
                
                <!-- Status Badge -->
                <div class="absolute top-4 left-4">
                  <span class={`px-3 py-1 rounded-full text-xs font-semibold ${
                    warehouse.data.availability === 'available' 
                      ? 'bg-green-100 text-green-700' 
                      : 'bg-yellow-100 text-yellow-700'
                  }`}>
                    {warehouse.data.availability === 'available' ? 'Available Now' : 'Pending'}
                  </span>
                </div>

                <!-- Featured Badge -->
                {warehouse.data.featured && (
                  <div class="absolute top-4 right-4">
                    <span class="px-3 py-1 bg-primary-500 text-white rounded-full text-xs font-semibold">
                      Featured
                    </span>
                  </div>
                )}
              </div>

              <!-- Content Section -->
              <div class="p-6 flex-1 flex flex-col">
                <h3 class="text-xl font-bold text-gray-900 mb-2 line-clamp-2">{warehouse.data.title}</h3>
                <p class="text-gray-600 mb-4 flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  {warehouse.data.location}
                </p>
                
                <!-- Price and Size -->
                <div class="flex justify-between items-center mb-4">
                  <span class="text-2xl font-bold text-primary-600">{warehouse.data.price}</span>
                  <span class="text-gray-500 font-medium">{warehouse.data.size?.toLocaleString()} SF</span>
                </div>
                
                <!-- Description -->
                <p class="text-gray-600 text-sm mb-4 line-clamp-3 flex-1">{warehouse.data.description}</p>
                
                <!-- Features -->
                {warehouse.data.features && warehouse.data.features.length > 0 && (
                  <div class="mb-4">
                    <div class="flex flex-wrap gap-1">
                      {warehouse.data.features.slice(0, 3).map((feature) => (
                        <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                          {feature}
                        </span>
                      ))}
                      {warehouse.data.features.length > 3 && (
                        <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                          +{warehouse.data.features.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                )}
                
                <!-- CTA Button -->
                <a 
                  href={`/warehouses/${warehouse.data.slug}`}
                  class="block w-full bg-primary-600 text-white text-center py-3 rounded-xl font-semibold hover:bg-primary-700 transition-colors duration-200 mt-auto"
                >
                  View Details
                </a>
              </div>
            </div>
          ))}
        </div>

        <!-- No Results Message -->
        <div id="no-results" class="hidden text-center py-16">
          <div class="max-w-md mx-auto">
            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">No properties found</h3>
            <p class="text-gray-600 mb-4">Try adjusting your search or filters to find more results.</p>
            <button 
              class="px-6 py-3 bg-primary-600 text-white rounded-xl hover:bg-primary-700 transition-colors"
              onclick="window.clearAllFilters()"
              type="button"
            >
              Clear All Filters
            </button>
              Clear All Filters
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Call to Action Section -->
    <section class="py-20 bg-primary-600">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2 class="text-3xl lg:text-4xl font-bold text-white mb-6">
          Don't See What You're Looking For?
        </h2>
        <p class="text-xl text-primary-100 mb-8 leading-relaxed">
          We have access to off-market properties and can help you find exactly what you need. 
          Our service is completely free - landlords pay our fee.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="/contact" 
            class="px-8 py-4 bg-white text-primary-600 rounded-xl font-semibold hover:bg-gray-50 transition-colors duration-200"
          >
            Tell Us Your Requirements
          </a>
          <a 
            href="tel:+1234567890" 
            class="px-8 py-4 border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-primary-600 transition-colors duration-200"
          >
            Call Now: (123) 456-7890
          </a>
        </div>
      </div>
    </section>
  </main>

  <Footer />

  <!-- Enhanced JavaScript for Filtering and Search -->
  <script>
    // Declare global function type
    declare global {
      interface Window {
        clearAllFilters: () => void;
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      const propertiesGrid = document.getElementById('properties-grid') as HTMLElement;
      const propertyCards = document.querySelectorAll('.property-card') as NodeListOf<HTMLElement>;
      const filterButtons = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLButtonElement>;
      const noResults = document.getElementById('no-results') as HTMLElement;
      const visibleCount = document.getElementById('visible-count') as HTMLElement;
      const totalCount = document.getElementById('total-count') as HTMLElement;
      
      type FilterType = 'search' | 'availability' | 'size' | 'featured' | 'clear';
      type FilterStateType = 'search' | 'availability' | 'size' | 'featured';
      
      let currentFilters: Record<FilterStateType, string> = {
        search: '',
        availability: '',
        size: '',
        featured: ''
      };

      // Search functionality
      if (searchInput) {
        searchInput.addEventListener('input', function(e: Event) {
          const target = e.target as HTMLInputElement;
          if (target) {
            currentFilters.search = target.value.toLowerCase();
            filterProperties();
          }
        });
      }

      // Filter button functionality
      filterButtons.forEach((button: HTMLButtonElement) => {
        button.addEventListener('click', function(this: HTMLButtonElement) {
          const filterType = this.dataset.filter as FilterType;
          const filterValue = this.dataset.value || '';

          if (filterType === 'clear') {
            clearAllFilters();
            return;
          }

          // Reset other buttons of the same type
          filterButtons.forEach((btn: HTMLButtonElement) => {
            const btnFilterType = btn.dataset.filter as FilterType;
            if (btnFilterType === filterType && btn !== this) {
              btn.classList.remove('bg-primary-600', 'text-white');
              btn.classList.add('bg-gray-100', 'text-gray-700');
            }
          });

          // Toggle this button (filterType is guaranteed to be FilterStateType here)
          const stateFilterType = filterType as FilterStateType;
          if (currentFilters[stateFilterType] === filterValue) {
            // Deactivate filter
            currentFilters[stateFilterType] = '';
            this.classList.remove('bg-primary-600', 'text-white');
            this.classList.add('bg-gray-100', 'text-gray-700');
          } else {
            // Activate filter
            currentFilters[stateFilterType] = filterValue;
            this.classList.remove('bg-gray-100', 'text-gray-700');
            this.classList.add('bg-primary-600', 'text-white');
          }

          filterProperties();
        });
      });

      function filterProperties(): void {
        let visibleCards = 0;

        propertyCards.forEach((card: HTMLElement) => {
          const warehouseDataStr = card.dataset.warehouse;
          if (!warehouseDataStr) return;
          
          const warehouseData = JSON.parse(warehouseDataStr);
          let isVisible = true;

          // Search filter
          if (currentFilters.search) {
            const searchTerms = currentFilters.search.toLowerCase();
            const searchableText = [
              warehouseData.title || '',
              warehouseData.location || '',
              warehouseData.description || '',
              ...(warehouseData.features || [])
            ].join(' ').toLowerCase();
            
            if (!searchableText.includes(searchTerms)) {
              isVisible = false;
            }
          }

          // Availability filter
          if (currentFilters.availability && warehouseData.availability !== currentFilters.availability) {
            isVisible = false;
          }

          // Size filter
          if (currentFilters.size) {
            const size = warehouseData.size || 0;
            if (currentFilters.size === 'small' && size >= 10000) isVisible = false;
            if (currentFilters.size === 'medium' && (size < 10000 || size >= 50000)) isVisible = false;
            if (currentFilters.size === 'large' && size < 50000) isVisible = false;
          }

          // Featured filter
          if (currentFilters.featured === 'true' && !warehouseData.featured) {
            isVisible = false;
          }

          // Show/hide card
          if (isVisible) {
            card.style.display = 'flex';
            visibleCards++;
          } else {
            card.style.display = 'none';
          }
        });

        // Update results counter
        if (visibleCount) visibleCount.textContent = visibleCards.toString();

        // Show/hide no results message
        if (visibleCards === 0) {
          noResults?.classList.remove('hidden');
          propertiesGrid?.classList.add('hidden');
        } else {
          noResults?.classList.add('hidden');
          propertiesGrid?.classList.remove('hidden');
        }
      }

      function clearAllFilters(): void {
        // Reset filters object
        currentFilters = {
          search: '',
          availability: '',
          size: '',
          featured: ''
        };

        // Reset search input
        if (searchInput) {
          searchInput.value = '';
        }

        // Reset all filter buttons
        filterButtons.forEach((button: HTMLButtonElement) => {
          const filterType = button.dataset.filter as FilterType;
          if (filterType !== 'clear') {
            button.classList.remove('bg-primary-600', 'text-white');
            button.classList.add('bg-gray-100', 'text-gray-700');
          }
        });

        // Show all properties
        filterProperties();
      }

      // Make clearAllFilters globally available
      window.clearAllFilters = clearAllFilters;

      // Initialize from URL parameters
      function initializeFromURL(): void {
        const urlParams = new URLSearchParams(window.location.search);
        
        // Set search if provided
        const searchQuery = urlParams.get('search');
        if (searchQuery && searchInput) {
          searchInput.value = searchQuery;
          currentFilters.search = searchQuery.toLowerCase();
        }
        
        // Set filters if provided
        const availability = urlParams.get('availability');
        if (availability) {
          currentFilters.availability = availability;
          const button = document.querySelector(`[data-filter="availability"][data-value="${availability}"]`) as HTMLButtonElement;
          if (button) {
            button.classList.remove('bg-gray-100', 'text-gray-700');
            button.classList.add('bg-primary-600', 'text-white');
          }
        }
        
        filterProperties();
      }

      // Initialize from URL on page load
      initializeFromURL();
    });
  </script>

  <style>
    /* Enhanced animations */
    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(3deg); }
    }

    @keyframes float-reverse {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(20px) rotate(-3deg); }
    }

    .animate-float {
      animation: float 6s ease-in-out infinite;
    }

    .animate-float-reverse {
      animation: float-reverse 8s ease-in-out infinite;
    }

    /* Line clamp utilities */
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    /* Video optimization */
    video {
      object-position: center;
    }

    /* Enhanced glassmorphism for video overlay */
    .backdrop-blur-xl {
      backdrop-filter: blur(16px);
      -webkit-backdrop-filter: blur(16px);
    }

    /* Scroll animation */
    .animate-on-scroll {
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.8s ease-out forwards;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Enhanced shadow utilities */
    .shadow-3xl {
      box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.25);
    }
  </style>
</BaseLayout>