---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

const warehouses = await getCollection('warehouses');
const sortedWarehouses = warehouses.sort((a: CollectionEntry<'warehouses'>, b: CollectionEntry<'warehouses'>) => {
  // Sort by availability (available first), then by featured status
  if (a.data.availability === 'available' && b.data.availability !== 'available') return -1;
  if (a.data.availability !== 'available' && b.data.availability === 'available') return 1;
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  return 0;
});

// Calculate stats
const availableWarehouses = warehouses.filter(w => w.data.availability === 'available');
const totalSquareFootage = availableWarehouses.reduce((sum, w) => sum + w.data.size, 0);
const uniqueLocations = new Set(availableWarehouses.map(w => w.data.location.split(',')[0].trim())).size;
const allLocations = [...new Set(warehouses.map(w => w.data.location.split(',')[0].trim()))].sort();
const allFeatures = [...new Set(warehouses.flatMap(w => w.data.features))].sort();
---

<BaseLayout title="Premium Warehouse Listings | WarehouseHub - Industrial Real Estate">
  <!-- Enhanced Hero Section -->
  <section class="relative bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 pt-16 pb-24 overflow-hidden">
    <!-- Background Pattern -->
    <div class="absolute inset-0 opacity-5">
      <div class="absolute inset-0" style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0); background-size: 20px 20px;"></div>
    </div>
    
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-16">
        <!-- Premium Badge -->
        <div class="inline-flex items-center bg-gradient-to-r from-blue-500/20 to-purple-500/20 backdrop-blur-sm border border-white/20 text-white px-6 py-3 rounded-full text-sm font-semibold mb-8">
          <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          Premium Property Portfolio
        </div>

        <h1 class="text-4xl md:text-6xl font-bold text-white mb-8 leading-tight">
          <span class="block">Industrial Real Estate</span>
          <span class="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">Excellence</span>
        </h1>
        
        <p class="text-xl text-blue-100 max-w-3xl mx-auto mb-12">
          Discover world-class warehouse and distribution facilities designed for operational excellence. 
          <span class="text-white font-semibold">Strategic locations, modern infrastructure, flexible terms.</span>
        </p>
      </div>
      
      <!-- Stats Cards with Glass Morphism -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto">
        <div class="backdrop-blur-xl bg-white/10 rounded-3xl p-8 border border-white/20 text-center group hover:bg-white/20 transition-all duration-300">
          <div class="text-4xl font-bold text-white mb-2 counter" data-target={availableWarehouses.length}>0</div>
          <p class="text-blue-200 font-semibold">Premium Properties</p>
          <p class="text-blue-100 text-sm mt-2">Ready for immediate occupancy</p>
        </div>
        <div class="backdrop-blur-xl bg-white/10 rounded-3xl p-8 border border-white/20 text-center group hover:bg-white/20 transition-all duration-300">
          <div class="text-4xl font-bold text-white mb-2 counter" data-target={Math.round(totalSquareFootage / 1000000 * 10) / 10}>0</div>
          <p class="text-blue-200 font-semibold">Million+ Sq Ft</p>
          <p class="text-blue-100 text-sm mt-2">Total available space</p>
        </div>
        <div class="backdrop-blur-xl bg-white/10 rounded-3xl p-8 border border-white/20 text-center group hover:bg-white/20 transition-all duration-300">
          <div class="text-4xl font-bold text-white mb-2 counter" data-target={uniqueLocations}>0</div>
          <p class="text-blue-200 font-semibold">Strategic Markets</p>
          <p class="text-blue-100 text-sm mt-2">Key distribution centers</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Advanced Filter Section -->
  <section class="relative -mt-12 z-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-3xl shadow-2xl border border-gray-100 p-8 md:p-12">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Find Your Perfect Space</h2>
            <p class="text-gray-600">Use our advanced filters to narrow down properties that match your specific requirements</p>
          </div>
          <button 
            id="clearFilters"
            class="hidden lg:flex items-center text-gray-600 hover:text-gray-800 px-6 py-3 rounded-2xl hover:bg-gray-100 transition-all duration-300"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Clear All Filters
          </button>
        </div>
        
        <!-- Filter Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6 mb-8">
          <!-- Location Filter -->
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700">Location</label>
            <select 
              id="locationFilter" 
              class="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 bg-white"
            >
              <option value="">All Locations</option>
              {allLocations.map(location => (
                <option value={location.toLowerCase()}>{location}</option>
              ))}
            </select>
          </div>
          
          <!-- Size Range -->
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700">Min Size (sq ft)</label>
            <input 
              type="number" 
              id="minSizeFilter" 
              placeholder="0"
              class="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300"
            />
          </div>
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700">Max Size (sq ft)</label>
            <input 
              type="number" 
              id="maxSizeFilter" 
              placeholder="Any size"
              class="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300"
            />
          </div>
          
          <!-- Status Filter -->
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700">Availability</label>
            <select 
              id="statusFilter" 
              class="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 bg-white"
            >
              <option value="">All Properties</option>
              <option value="available">Available Now</option>
              <option value="pending">Pending</option>
              <option value="leased">Recently Leased</option>
            </select>
          </div>

          <!-- Quick Search -->
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700">Quick Search</label>
            <input 
              type="text" 
              id="quickSearch" 
              placeholder="Search properties..."
              class="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300"
            />
          </div>
        </div>

        <!-- Advanced Features Filter -->
        <div class="border-t border-gray-200 pt-8">
          <div class="flex items-center justify-between mb-4">
            <h3 class="font-semibold text-gray-900">Property Features</h3>
            <button 
              id="toggleFeatures"
              class="text-blue-600 hover:text-blue-700 text-sm font-semibold"
            >
              Show Advanced Filters
            </button>
          </div>
          
          <div id="featuresFilter" class="hidden grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {allFeatures.slice(0, 12).map(feature => (
              <label class="flex items-center space-x-3 cursor-pointer group">
                <input 
                  type="checkbox" 
                  value={feature.toLowerCase()}
                  class="feature-checkbox w-5 h-5 text-blue-600 border-2 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                />
                <span class="text-sm text-gray-700 group-hover:text-gray-900 transition-colors duration-300">{feature}</span>
              </label>
            ))}
          </div>
        </div>
        
        <!-- Apply/Clear Buttons for Mobile -->
        <div class="flex gap-4 mt-8 lg:hidden">
          <button 
            id="applyFilters"
            class="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-8 py-4 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105"
          >
            Apply Filters
          </button>
          <button 
            id="clearFiltersMobile"
            class="px-8 py-4 border-2 border-gray-300 hover:border-gray-400 text-gray-700 hover:text-gray-900 rounded-2xl font-semibold transition-all duration-300"
          >
            Clear
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Results Section -->
  <section class="bg-gradient-to-b from-gray-50 to-white py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Results Header -->
      <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-12 gap-6">
        <div>
          <h3 class="text-3xl font-bold text-gray-900 mb-3">Available Properties</h3>
          <p class="text-gray-600">
            Showing <span id="resultsCount" class="font-semibold text-blue-600">{sortedWarehouses.length}</span> of {sortedWarehouses.length} properties
          </p>
        </div>
        
        <div class="flex items-center gap-4">
          <!-- View Toggle -->
          <div class="bg-gray-100 rounded-2xl p-1">
            <button 
              id="gridView"
              class="px-4 py-2 rounded-xl transition-all duration-300 bg-white shadow-sm text-gray-900"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
              </svg>
            </button>
            <button 
              id="listView"
              class="px-4 py-2 rounded-xl transition-all duration-300 text-gray-500"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
              </svg>
            </button>
          </div>

          <!-- Sort Options -->
          <select 
            id="sortFilter" 
            class="px-6 py-3 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 bg-white font-semibold"
          >
            <option value="featured">Featured First</option>
            <option value="size-large">Size: Largest First</option>
            <option value="size-small">Size: Smallest First</option>
            <option value="price-low">Price: Low to High</option>
            <option value="price-high">Price: High to Low</option>
          </select>
        </div>
      </div>

      <!-- Properties Grid -->
      <div id="warehouseGrid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-8 mb-16">
        {sortedWarehouses.map((warehouse: CollectionEntry<'warehouses'>) => (
          <div 
            class="warehouse-card group relative bg-white rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-gray-100 overflow-hidden"
            data-location={warehouse.data.location.toLowerCase()}
            data-size={warehouse.data.size}
            data-status={warehouse.data.availability}
            data-featured={warehouse.data.featured}
            data-features={warehouse.data.features.map(f => f.toLowerCase()).join(',')}
            data-title={warehouse.data.title.toLowerCase()}
            data-price={warehouse.data.price.toLowerCase()}
          >
            <!-- Image Container -->
            <div class="relative h-64 overflow-hidden">
              {warehouse.data.images && warehouse.data.images[0] ? (
                <img 
                  src={warehouse.data.images[0]} 
                  alt={warehouse.data.title}
                  class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                  loading="lazy"
                />
              ) : (
                <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                  <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </div>
              )}
              
              <!-- Overlay Gradient -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              
              <!-- Badges -->
              <div class="absolute top-4 left-4 space-y-2">
                {warehouse.data.featured && (
                  <div class="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white px-3 py-1 rounded-full text-sm font-semibold shadow-lg">
                    Featured
                  </div>
                )}
                <div class={`px-3 py-1 rounded-full text-sm font-semibold shadow-lg ${
                  warehouse.data.availability === 'available' ? 'bg-gradient-to-r from-green-500 to-green-600 text-white' :
                  warehouse.data.availability === 'pending' ? 'bg-gradient-to-r from-yellow-500 to-yellow-600 text-white' :
                  'bg-gradient-to-r from-red-500 to-red-600 text-white'
                }`}>
                  {warehouse.data.availability === 'available' ? 'Available' :
                   warehouse.data.availability === 'pending' ? 'Pending' : 'Leased'}
                </div>
              </div>

              <!-- Quick Actions -->
              <div class="absolute top-4 right-4 space-y-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <button class="favorite-btn bg-white/90 hover:bg-white text-gray-700 hover:text-red-500 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                  </svg>
                </button>
                <button class="share-btn bg-white/90 hover:bg-white text-gray-700 hover:text-blue-500 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                  </svg>
                </button>
              </div>

              <!-- View Details Button -->
              <div class="absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <a 
                  href={`/warehouses/${warehouse.data.slug}`}
                  class="bg-white/90 hover:bg-white text-gray-900 px-6 py-3 rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 flex items-center"
                >
                  <span>View Details</span>
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                  </svg>
                </a>
              </div>
            </div>
            
            <!-- Content -->
            <div class="p-8">
              <h3 class="text-2xl font-bold text-gray-900 mb-3 group-hover:text-blue-600 transition-colors duration-300">{warehouse.data.title}</h3>
              
              <div class="flex items-center text-gray-600 mb-6">
                <svg class="w-5 h-5 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <span class="font-medium">{warehouse.data.location}</span>
              </div>
              
              <!-- Stats Grid -->
              <div class="grid grid-cols-2 gap-4 mb-6">
                <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-2xl">
                  <div class="text-2xl font-bold text-blue-600">{warehouse.data.price}</div>
                  <div class="text-sm text-blue-600/80 font-medium">per sq ft/year</div>
                </div>
                <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-2xl">
                  <div class="text-2xl font-bold text-purple-600">{warehouse.data.size.toLocaleString()}</div>
                  <div class="text-sm text-purple-600/80 font-medium">sq ft</div>
                </div>
              </div>

              <!-- Features -->
              <div class="mb-8">
                <div class="flex flex-wrap gap-2">
                  {warehouse.data.features.slice(0, 3).map((feature: string) => (
                    <span class="bg-gray-100 hover:bg-gray-200 text-gray-700 text-xs font-medium px-3 py-1 rounded-full transition-colors duration-300">
                      {feature}
                    </span>
                  ))}
                  {warehouse.data.features.length > 3 && (
                    <span class="bg-blue-50 text-blue-600 text-xs font-medium px-3 py-1 rounded-full">
                      +{warehouse.data.features.length - 3} more
                    </span>
                  )}
                </div>
              </div>
              
              <!-- CTA Buttons -->
              <div class="flex gap-3">
                <a 
                  href={`/warehouses/${warehouse.data.slug}`}
                  class="flex-1 text-center bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-4 rounded-2xl font-semibold transition-all duration-300 transform group-hover:scale-105"
                >
                  View Details
                </a>
                <button class="contact-btn bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 px-6 py-4 rounded-2xl font-semibold transition-all duration-300 transform group-hover:scale-105">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- No Results State -->
      <div id="noResults" class="hidden text-center py-16">
        <div class="max-w-md mx-auto">
          <div class="bg-gradient-to-br from-gray-100 to-gray-200 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-8">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.56 1.01-6.05 2.773M15 17a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-gray-900 mb-4">No properties match your criteria</h3>
          <p class="text-gray-600 mb-8">Try adjusting your filters or contact us to discuss additional options that may meet your needs.</p>
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <button 
              onclick="clearAllFilters()" 
              class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-2xl font-semibold transition-colors duration-300"
            >
              View All Properties
            </button>
            <a 
              href="/#contact"
              class="bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 px-8 py-4 rounded-2xl font-semibold transition-colors duration-300"
            >
              Contact an Expert
            </a>
          </div>
        </div>
      </div>

      <!-- Load More Button -->
      <div id="loadMore" class="text-center mt-12">
        <button class="bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-700 hover:text-gray-900 px-12 py-4 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 border border-gray-200">
          Load More Properties
        </button>
      </div>
    </div>
  </section>

  <!-- Mobile Sticky Filter -->
  <div class="fixed bottom-6 left-4 right-4 z-40 md:hidden">
    <div class="flex gap-3">
      <button 
        id="mobileFilterBtn"
        class="flex-1 bg-white border-2 border-gray-300 text-gray-700 px-6 py-4 rounded-2xl font-semibold transition-all duration-300 shadow-lg flex items-center justify-center"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
        </svg>
        Filter
      </button>
      <a 
        href="/#contact"
        class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-6 py-4 rounded-2xl font-semibold transition-all duration-300 shadow-lg text-center"
      >
        Get Help
      </a>
    </div>
  </div>

  <style>
    /* Enhanced animations for filters and cards */
    .warehouse-card {
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .warehouse-card:hover {
      transform: translateY(-8px) scale(1.02);
    }

    /* Animated counter */
    .counter {
      animation: countUp 2s ease-out;
    }

    @keyframes countUp {
      from { opacity: 0; transform: scale(0.5); }
      to { opacity: 1; transform: scale(1); }
    }

    /* Filter animations */
    #featuresFilter {
      transition: all 0.3s ease;
    }

    #featuresFilter.show {
      display: grid;
      animation: slideDown 0.3s ease;
    }

    @keyframes slideDown {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>

  <script>
    // Enhanced filtering with mobile-first approach
    document.addEventListener('DOMContentLoaded', () => {
      const locationFilter = document.getElementById('locationFilter') as HTMLSelectElement;
      const minSizeFilter = document.getElementById('minSizeFilter') as HTMLInputElement;
      const maxSizeFilter = document.getElementById('maxSizeFilter') as HTMLInputElement;
      const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
      const quickSearch = document.getElementById('quickSearch') as HTMLInputElement;
      const sortFilter = document.getElementById('sortFilter') as HTMLSelectElement;
      const toggleFeatures = document.getElementById('toggleFeatures');
      const featuresFilter = document.getElementById('featuresFilter');
      const clearButton = document.getElementById('clearFilters');
      const clearMobileButton = document.getElementById('clearFiltersMobile');
      const applyButton = document.getElementById('applyFilters');
      const warehouseGrid = document.getElementById('warehouseGrid');
      const warehouseCards = document.querySelectorAll('.warehouse-card');
      const resultsCount = document.getElementById('resultsCount');
      const noResults = document.getElementById('noResults');
      const gridViewBtn = document.getElementById('gridView');
      const listViewBtn = document.getElementById('listView');
      const featureCheckboxes = document.querySelectorAll('.feature-checkbox') as NodeListOf<HTMLInputElement>;

      // Initialize counters
      const counters = document.querySelectorAll('.counter');
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const target = parseFloat(entry.target.getAttribute('data-target') || '0');
            const increment = target / 50;
            let current = 0;
            
            const timer = setInterval(() => {
              current += increment;
              if (current >= target) {
                entry.target.textContent = target % 1 === 0 ? target.toString() : target.toFixed(1);
                clearInterval(timer);
              } else {
                const value = current % 1 === 0 ? Math.ceil(current).toString() : current.toFixed(1);
                entry.target.textContent = value;
              }
            }, 40);
            
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.5 });
      
      counters.forEach(counter => observer.observe(counter));

      // Toggle advanced features
      toggleFeatures?.addEventListener('click', () => {
        if (featuresFilter?.classList.contains('hidden')) {
          featuresFilter.classList.remove('hidden');
          featuresFilter.classList.add('show');
          toggleFeatures.textContent = 'Hide Advanced Filters';
        } else {
          featuresFilter?.classList.add('hidden');
          featuresFilter?.classList.remove('show');
          toggleFeatures.textContent = 'Show Advanced Filters';
        }
      });

      // View toggle
      gridViewBtn?.addEventListener('click', () => {
        warehouseGrid?.classList.remove('grid-cols-1');
        warehouseGrid?.classList.add('grid-cols-1', 'md:grid-cols-2', 'xl:grid-cols-3');
        gridViewBtn.classList.add('bg-white', 'shadow-sm', 'text-gray-900');
        gridViewBtn.classList.remove('text-gray-500');
        listViewBtn?.classList.remove('bg-white', 'shadow-sm', 'text-gray-900');
        listViewBtn?.classList.add('text-gray-500');
      });

      listViewBtn?.addEventListener('click', () => {
        warehouseGrid?.classList.remove('md:grid-cols-2', 'xl:grid-cols-3');
        warehouseGrid?.classList.add('grid-cols-1');
        listViewBtn.classList.add('bg-white', 'shadow-sm', 'text-gray-900');
        listViewBtn.classList.remove('text-gray-500');
        gridViewBtn?.classList.remove('bg-white', 'shadow-sm', 'text-gray-900');
        gridViewBtn?.classList.add('text-gray-500');
      });

      function filterAndSortWarehouses() {
        const location = locationFilter?.value.toLowerCase() || '';
        const minSize = parseInt(minSizeFilter?.value || '0') || 0;
        const maxSize = parseInt(maxSizeFilter?.value || '') || Infinity;
        const status = statusFilter?.value || '';
        const search = quickSearch?.value.toLowerCase() || '';
        const sortBy = sortFilter?.value || 'featured';
        const selectedFeatures = Array.from(featureCheckboxes)
          .filter((cb) => cb.checked)
          .map((cb) => cb.value);

        let visibleCards: Element[] = [];

        // Filter cards
        warehouseCards.forEach((card) => {
          const cardLocation = card.getAttribute('data-location') || '';
          const cardSize = parseInt(card.getAttribute('data-size') || '0');
          const cardStatus = card.getAttribute('data-status');
          const cardFeatures = card.getAttribute('data-features') || '';
          const cardTitle = card.getAttribute('data-title') || '';
          const cardPrice = card.getAttribute('data-price') || '';

          const matchesLocation = !location || cardLocation.includes(location);
          const matchesSize = cardSize >= minSize && cardSize <= maxSize;
          const matchesStatus = !status || cardStatus === status;
          const matchesSearch = !search || cardTitle.includes(search) || cardLocation.includes(search) || cardPrice.includes(search);
          const matchesFeatures = selectedFeatures.length === 0 || 
            selectedFeatures.every(feature => cardFeatures.includes(feature));

          if (matchesLocation && matchesSize && matchesStatus && matchesSearch && matchesFeatures) {
            visibleCards.push(card);
            (card as HTMLElement).style.display = 'block';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });

        // Sort visible cards
        visibleCards.sort((a, b) => {
          const aSize = parseInt(a.getAttribute('data-size') || '0');
          const bSize = parseInt(b.getAttribute('data-size') || '0');
          const aFeatured = a.getAttribute('data-featured') === 'true';
          const bFeatured = b.getAttribute('data-featured') === 'true';
          
          switch (sortBy) {
            case 'featured':
              if (aFeatured && !bFeatured) return -1;
              if (!aFeatured && bFeatured) return 1;
              return 0;
            case 'size-large':
              return bSize - aSize;
            case 'size-small':
              return aSize - bSize;
            default:
              return 0;
          }
        });

        // Reorder DOM elements
        visibleCards.forEach(card => {
          warehouseGrid?.appendChild(card);
        });

        // Update results count
        if (resultsCount) resultsCount.textContent = visibleCards.length.toString();
        if (noResults) noResults.classList.toggle('hidden', visibleCards.length > 0);
      }

      function clearAllFilters() {
        if (locationFilter) locationFilter.value = '';
        if (minSizeFilter) minSizeFilter.value = '';
        if (maxSizeFilter) maxSizeFilter.value = '';
        if (statusFilter) statusFilter.value = '';
        if (quickSearch) quickSearch.value = '';
        if (sortFilter) sortFilter.value = 'featured';
        
        featureCheckboxes.forEach((cb) => {
          cb.checked = false;
        });
        
        filterAndSortWarehouses();
      }

      // Make clearAllFilters globally available
      (window as any).clearAllFilters = clearAllFilters;

      // Event listeners
      locationFilter?.addEventListener('change', filterAndSortWarehouses);
      minSizeFilter?.addEventListener('input', filterAndSortWarehouses);
      maxSizeFilter?.addEventListener('input', filterAndSortWarehouses);
      statusFilter?.addEventListener('change', filterAndSortWarehouses);
      quickSearch?.addEventListener('input', filterAndSortWarehouses);
      sortFilter?.addEventListener('change', filterAndSortWarehouses);
      
      featureCheckboxes.forEach(cb => {
        cb.addEventListener('change', filterAndSortWarehouses);
      });

      clearButton?.addEventListener('click', clearAllFilters);
      clearMobileButton?.addEventListener('click', clearAllFilters);
      applyButton?.addEventListener('click', filterAndSortWarehouses);

      // Mobile filter button
      const mobileFilterBtn = document.getElementById('mobileFilterBtn');
      mobileFilterBtn?.addEventListener('click', () => {
        const filtersSection = document.querySelector('section:nth-child(2)');
        filtersSection?.scrollIntoView({ behavior: 'smooth' });
      });

      // Quick actions
      document.querySelectorAll('.favorite-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          btn.classList.toggle('text-red-500');
          // Add to favorites logic here
        });
      });

      document.querySelectorAll('.contact-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          window.open('tel:(555)123-4567');
        });
      });

      // Initialize
      filterAndSortWarehouses();
    });
  </script>
</BaseLayout>