---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const warehouses = await getCollection('warehouses');
const sortedWarehouses = warehouses.sort((a, b) => {
  // Sort by availability (available first), then by featured status
  if (a.data.availability === 'available' && b.data.availability !== 'available') return -1;
  if (a.data.availability !== 'available' && b.data.availability === 'available') return 1;
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  return 0;
});
---

<BaseLayout title="All Warehouse Listings | WarehouseHub">
  <section class="py-12 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-4xl font-bold text-center mb-8">All Warehouse Listings</h1>
      
      <!-- Filter Section -->
      <div class="bg-white rounded-lg shadow p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Location</label>
            <input 
              type="text" 
              id="locationFilter" 
              placeholder="Filter by location..."
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Min Size (sq ft)</label>
            <input 
              type="number" 
              id="minSizeFilter" 
              placeholder="0"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Max Size (sq ft)</label>
            <input 
              type="number" 
              id="maxSizeFilter" 
              placeholder="Any"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select 
              id="statusFilter" 
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All</option>
              <option value="available">Available</option>
              <option value="leased">Leased</option>
              <option value="pending">Pending</option>
            </select>
          </div>
        </div>
        <div class="mt-4 flex justify-end">
          <button 
            id="clearFilters"
            class="text-gray-600 hover:text-gray-800 mr-4"
          >
            Clear Filters
          </button>
          <button 
            id="applyFilters"
            class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold"
          >
            Apply Filters
          </button>
        </div>
      </div>

      <!-- Results Count -->
      <p class="text-gray-600 mb-6">
        Showing <span id="resultsCount">{sortedWarehouses.length}</span> properties
      </p>

      <!-- Warehouse Grid -->
      <div id="warehouseGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {sortedWarehouses.map((warehouse) => (
          <div 
            class="warehouse-card bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow"
            data-location={warehouse.data.location.toLowerCase()}
            data-size={warehouse.data.size}
            data-status={warehouse.data.availability}
          >
            <div class="h-56 bg-gray-300 relative">
              {warehouse.data.images && warehouse.data.images[0] && (
                <img 
                  src={warehouse.data.images[0]} 
                  alt={warehouse.data.title}
                  class="w-full h-full object-cover"
                />
              )}
              {warehouse.data.featured && (
                <div class="absolute top-4 left-4 bg-yellow-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                  Featured
                </div>
              )}
              <div class={`absolute top-4 right-4 px-3 py-1 rounded-full text-sm font-semibold ${
                warehouse.data.availability === 'available' ? 'bg-green-500 text-white' :
                warehouse.data.availability === 'pending' ? 'bg-yellow-500 text-white' :
                'bg-red-500 text-white'
              }`}>
                {warehouse.data.availability === 'available' ? 'Available' :
                 warehouse.data.availability === 'pending' ? 'Pending' : 'Leased'}
              </div>
            </div>
            <div class="p-6">
              <h3 class="text-xl font-semibold mb-2">{warehouse.data.title}</h3>
              <p class="text-gray-600 mb-2">
                <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                {warehouse.data.location}
              </p>
              <div class="flex justify-between items-center mb-4">
                <span class="text-2xl font-bold text-blue-600">{warehouse.data.price}</span>
                <span class="text-gray-500">{warehouse.data.size.toLocaleString()} sq ft</span>
              </div>
              <div class="mb-4">
                {warehouse.data.features.slice(0, 3).map((feature) => (
                  <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm text-gray-700 mr-2 mb-2">
                    {feature}
                  </span>
                ))}
              </div>
              <a 
                href={`/warehouses/${warehouse.data.slug}`}
                class="block text-center bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold"
              >
                View Details
              </a>
            </div>
          </div>
        ))}
      </div>

      <!-- No Results Message -->
      <div id="noResults" class="hidden text-center py-12">
        <p class="text-xl text-gray-600">No warehouses match your filters. Try adjusting your search criteria.</p>
      </div>
    </div>
  </section>

  <script>
    // Client-side filtering
    const locationFilter = document.getElementById('locationFilter') as HTMLInputElement;
    const minSizeFilter = document.getElementById('minSizeFilter') as HTMLInputElement;
    const maxSizeFilter = document.getElementById('maxSizeFilter') as HTMLInputElement;
    const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
    const applyButton = document.getElementById('applyFilters');
    const clearButton = document.getElementById('clearFilters');
    const warehouseCards = document.querySelectorAll('.warehouse-card');
    const resultsCount = document.getElementById('resultsCount');
    const noResults = document.getElementById('noResults');

    function filterWarehouses() {
      const location = locationFilter.value.toLowerCase();
      const minSize = parseInt(minSizeFilter.value) || 0;
      const maxSize = parseInt(maxSizeFilter.value) || Infinity;
      const status = statusFilter.value;

      let visibleCount = 0;

      warehouseCards.forEach((card) => {
        const cardLocation = card.getAttribute('data-location') || '';
        const cardSize = parseInt(card.getAttribute('data-size') || '0');
        const cardStatus = card.getAttribute('data-status');

        const matchesLocation = !location || cardLocation.includes(location);
        const matchesSize = cardSize >= minSize && cardSize <= maxSize;
        const matchesStatus = !status || cardStatus === status;

        if (matchesLocation && matchesSize && matchesStatus) {
          (card as HTMLElement).style.display = 'block';
          visibleCount++;
        } else {
          (card as HTMLElement).style.display = 'none';
        }
      });

      if (resultsCount) resultsCount.textContent = visibleCount.toString();
      if (noResults) noResults.classList.toggle('hidden', visibleCount > 0);
    }

    function clearFilters() {
      locationFilter.value = '';
      minSizeFilter.value = '';
      maxSizeFilter.value = '';
      statusFilter.value = '';
      filterWarehouses();
    }

    applyButton?.addEventListener('click', filterWarehouses);
    clearButton?.addEventListener('click', clearFilters);

    // Enable Enter key for filters
    [locationFilter, minSizeFilter, maxSizeFilter].forEach(input => {
      input?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') filterWarehouses();
      });
    });
  </script>
</BaseLayout>