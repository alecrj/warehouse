---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get all available warehouses
const warehouses = await getCollection('warehouses');
const availableWarehouses = warehouses.filter(w => w.data.availability === 'available');

// Extract unique values for filters
const counties = [...new Set(availableWarehouses.map(w => {
  const location = w.data.location.toLowerCase();
  if (location.includes('miami') || location.includes('dade')) return 'miami-dade';
  if (location.includes('broward') || location.includes('fort lauderdale') || location.includes('pompano')) return 'broward';
  if (location.includes('palm beach') || location.includes('boca') || location.includes('west palm')) return 'palm-beach';
  return 'other';
}))].filter(c => c !== 'other');

const sizeRanges = [
  { label: 'Under 5,000 SF', value: 'under-5000', min: 0, max: 4999 },
  { label: '5,000 - 25,000 SF', value: '5000-25000', min: 5000, max: 25000 },
  { label: '25,000 - 100,000 SF', value: '25000-100000', min: 25000, max: 100000 },
  { label: 'Over 100,000 SF', value: 'over-100000', min: 100000, max: Infinity }
];

const features = ['Loading Docks', 'Clear Height 24ft+', 'Office Space', 'Dock Doors', 'Grade Level'];
---

<BaseLayout 
  title="Industrial Properties for Lease | South Florida Warehouses"
  description="Browse available warehouse and industrial properties across Miami-Dade, Broward, and Palm Beach counties. Expert tenant representation at no cost."
>
  <!-- Page Header -->
  <section class="py-16 bg-gray-50 border-b border-gray-200">
    <div class="container mx-auto px-4 max-w-7xl">
      <div class="text-center">
        <h1 class="text-4xl lg:text-5xl font-bold text-gray-900 mb-6">Industrial Properties</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Browse warehouse and industrial spaces available for lease across South Florida. 
          All properties come with free expert tenant representation.
        </p>
      </div>
    </div>
  </section>

  <!-- Filters Section -->
  <section class="py-8 bg-white border-b border-gray-200">
    <div class="container mx-auto px-4 max-w-7xl">
      <div class="flex flex-col lg:flex-row gap-6 items-center">
        
        <!-- Search -->
        <div class="flex-1 w-full lg:w-auto">
          <div class="relative">
            <input 
              type="text" 
              id="search-input"
              placeholder="Search by location, features, or size..."
              class="w-full px-4 py-3 pl-12 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <svg class="absolute left-4 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>

        <!-- County Filter -->
        <div class="w-full lg:w-auto">
          <select id="county-filter" class="w-full lg:w-48 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            <option value="">All Counties</option>
            <option value="miami-dade">Miami-Dade</option>
            <option value="broward">Broward</option>
            <option value="palm-beach">Palm Beach</option>
          </select>
        </div>

        <!-- Size Filter -->
        <div class="w-full lg:w-auto">
          <select id="size-filter" class="w-full lg:w-48 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            <option value="">All Sizes</option>
            {sizeRanges.map(range => (
              <option value={range.value}>{range.label}</option>
            ))}
          </select>
        </div>

        <!-- Clear Filters -->
        <button 
          id="clear-filters" 
          class="px-6 py-3 text-gray-600 hover:text-gray-900 font-medium transition-colors duration-300"
        >
          Clear All
        </button>
      </div>
    </div>
  </section>

  <!-- Results Section -->
  <section class="py-12">
    <div class="container mx-auto px-4 max-w-7xl">
      
      <!-- Results Header -->
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
        <div>
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Available Properties</h2>
          <p id="results-count" class="text-gray-600">
            Showing {availableWarehouses.length} properties
          </p>
        </div>
        
        <!-- View Toggle -->
        <div class="mt-4 sm:mt-0 flex items-center gap-4">
          <span class="text-sm text-gray-600">View:</span>
          <div class="flex bg-gray-100 rounded-lg p-1">
            <button id="grid-view" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white rounded-md shadow-sm">
              Grid
            </button>
            <button id="list-view" class="px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700">
              List
            </button>
          </div>
        </div>
      </div>

      <!-- Properties Grid -->
      <div id="properties-grid" class="block">
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {availableWarehouses.map((warehouse) => (
            <div class="property-card bg-white border border-gray-200 rounded-2xl overflow-hidden hover:shadow-lg transition-shadow duration-300"
                 data-title={warehouse.data.title.toLowerCase()}
                 data-location={warehouse.data.location.toLowerCase()}
                 data-size={warehouse.data.size}
                 data-features={warehouse.data.features?.join(' ').toLowerCase() || ''}
                 data-county={
                   warehouse.data.location.toLowerCase().includes('miami') || warehouse.data.location.toLowerCase().includes('dade') 
                     ? 'miami-dade'
                     : warehouse.data.location.toLowerCase().includes('broward') || warehouse.data.location.toLowerCase().includes('fort lauderdale') || warehouse.data.location.toLowerCase().includes('pompano')
                     ? 'broward'
                     : warehouse.data.location.toLowerCase().includes('palm beach') || warehouse.data.location.toLowerCase().includes('boca') || warehouse.data.location.toLowerCase().includes('west palm')
                     ? 'palm-beach'
                     : 'other'
                 }>
              
              <!-- Property Image -->
              {warehouse.data.images && warehouse.data.images[0] && (
                <div class="h-48 overflow-hidden">
                  <img 
                    src={warehouse.data.images[0]} 
                    alt={warehouse.data.title}
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-500"
                    loading="lazy"
                  />
                </div>
              )}
              
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-900 mb-3 hover:text-blue-600 transition-colors duration-300">
                  <a href={`/warehouses/${warehouse.data.slug}`}>
                    {warehouse.data.title}
                  </a>
                </h3>
                
                <p class="text-gray-600 mb-4 flex items-center">
                  <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  </svg>
                  {warehouse.data.location}
                </p>
                
                <div class="flex items-center justify-between mb-6">
                  <div>
                    <div class="text-lg font-semibold text-gray-900">{warehouse.data.size.toLocaleString()} SF</div>
                    <div class="text-sm text-gray-600">{warehouse.data.price}</div>
                  </div>
                </div>
                
                <!-- Features -->
                {warehouse.data.features && warehouse.data.features.length > 0 && (
                  <div class="mb-6">
                    <div class="flex flex-wrap gap-1">
                      {warehouse.data.features.slice(0, 3).map((feature: string) => (
                        <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded">{feature}</span>
                      ))}
                      {warehouse.data.features.length > 3 && (
                        <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded">
                          +{warehouse.data.features.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                )}
                
                <!-- Actions -->
                <div class="flex gap-3">
                  <a href={`/warehouses/${warehouse.data.slug}`} class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-xl font-medium text-center transition-colors duration-300">
                    View Details
                  </a>
                  <a href="tel:+19549379667" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-xl transition-colors duration-300">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Properties List View (Hidden by default) -->
      <div id="properties-list" class="hidden">
        <div class="space-y-6">
          {availableWarehouses.map((warehouse) => (
            <div class="property-card bg-white border border-gray-200 rounded-2xl overflow-hidden hover:shadow-lg transition-shadow duration-300"
                 data-title={warehouse.data.title.toLowerCase()}
                 data-location={warehouse.data.location.toLowerCase()}
                 data-size={warehouse.data.size}
                 data-features={warehouse.data.features?.join(' ').toLowerCase() || ''}
                 data-county={
                   warehouse.data.location.toLowerCase().includes('miami') || warehouse.data.location.toLowerCase().includes('dade') 
                     ? 'miami-dade'
                     : warehouse.data.location.toLowerCase().includes('broward') || warehouse.data.location.toLowerCase().includes('fort lauderdale') || warehouse.data.location.toLowerCase().includes('pompano')
                     ? 'broward'
                     : warehouse.data.location.toLowerCase().includes('palm beach') || warehouse.data.location.toLowerCase().includes('boca') || warehouse.data.location.toLowerCase().includes('west palm')
                     ? 'palm-beach'
                     : 'other'
                 }>
              
              <div class="flex flex-col md:flex-row">
                <!-- Property Image -->
                {warehouse.data.images && warehouse.data.images[0] && (
                  <div class="md:w-1/3 h-48 md:h-auto overflow-hidden">
                    <img 
                      src={warehouse.data.images[0]} 
                      alt={warehouse.data.title}
                      class="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>
                )}
                
                <div class="flex-1 p-6">
                  <div class="flex flex-col md:flex-row md:justify-between">
                    <div class="flex-1">
                      <h3 class="text-xl font-bold text-gray-900 mb-2 hover:text-blue-600 transition-colors duration-300">
                        <a href={`/warehouses/${warehouse.data.slug}`}>
                          {warehouse.data.title}
                        </a>
                      </h3>
                      
                      <p class="text-gray-600 mb-4 flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                        </svg>
                        {warehouse.data.location}
                      </p>
                      
                      <div class="flex items-center gap-6 mb-4">
                        <div>
                          <div class="text-lg font-semibold text-gray-900">{warehouse.data.size.toLocaleString()} SF</div>
                          <div class="text-sm text-gray-600">{warehouse.data.price}</div>
                        </div>
                      </div>
                      
                      <!-- Features -->
                      {warehouse.data.features && warehouse.data.features.length > 0 && (
                        <div class="mb-4">
                          <div class="flex flex-wrap gap-1">
                            {warehouse.data.features.slice(0, 5).map((feature: string) => (
                              <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded">{feature}</span>
                            ))}
                            {warehouse.data.features.length > 5 && (
                              <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded">
                                +{warehouse.data.features.length - 5} more
                              </span>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <div class="md:ml-6 flex flex-col justify-between">
                      <div class="flex md:flex-col gap-3">
                        <a href={`/warehouses/${warehouse.data.slug}`} class="flex-1 md:flex-none bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-2 rounded-xl font-medium text-center transition-colors duration-300">
                          View Details
                        </a>
                        <a href="tel:+19549379667" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-xl font-medium text-center transition-colors duration-300">
                          <span class="hidden md:inline">Call Now</span>
                          <svg class="w-4 h-4 md:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                          </svg>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="hidden text-center py-16">
        <div class="max-w-md mx-auto">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-900 mb-4">No Properties Found</h3>
          <p class="text-gray-600 mb-8">
            No properties match your current filters. Try adjusting your search criteria or contact us for personalized assistance.
          </p>
          <a href="/contact" class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-xl font-medium hover:bg-blue-700 transition-colors duration-300">
            Get Expert Help
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section class="py-16 bg-gradient-to-br from-blue-600 to-blue-700 text-white">
    <div class="container mx-auto px-4 max-w-7xl text-center">
      <h2 class="text-3xl lg:text-4xl font-bold mb-6">
        Can't Find What You're Looking For?
      </h2>
      <p class="text-xl text-blue-100 mb-8 max-w-3xl mx-auto">
        Our experts have access to off-market properties and can help you find the perfect industrial space for your business. 
        Best of all, our tenant representation services are completely free.
      </p>
      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <a href="/contact" class="bg-white text-blue-600 px-8 py-4 rounded-xl font-bold hover:bg-gray-50 transition-colors duration-300">
          Get Expert Assistance
        </a>
        <a href="tel:+19549379667" class="bg-blue-500 text-white px-8 py-4 rounded-xl font-bold hover:bg-blue-400 transition-colors duration-300">
          Call (954) 937-9667
        </a>
      </div>
    </div>
  </section>
</BaseLayout>

<!-- JavaScript for filtering and view toggle -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const countyFilter = document.getElementById('county-filter') as HTMLSelectElement;
    const sizeFilter = document.getElementById('size-filter') as HTMLSelectElement;
    const clearFilters = document.getElementById('clear-filters') as HTMLButtonElement;
    const gridView = document.getElementById('grid-view') as HTMLButtonElement;
    const listView = document.getElementById('list-view') as HTMLButtonElement;
    const propertiesGrid = document.getElementById('properties-grid') as HTMLElement;
    const propertiesList = document.getElementById('properties-list') as HTMLElement;
    const emptyState = document.getElementById('empty-state') as HTMLElement;
    const resultsCount = document.getElementById('results-count') as HTMLElement;
    
    const propertyCards = document.querySelectorAll('.property-card') as NodeListOf<HTMLElement>;
    
    // Size ranges for filtering
    const sizeRanges: { [key: string]: { min: number; max: number } } = {
      'under-5000': { min: 0, max: 4999 },
      '5000-25000': { min: 5000, max: 25000 },
      '25000-100000': { min: 25000, max: 100000 },
      'over-100000': { min: 100000, max: Infinity }
    };
    
    function filterProperties(): void {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedCounty = countyFilter.value;
      const selectedSize = sizeFilter.value;
      
      let visibleCount = 0;
      
      propertyCards.forEach(card => {
        const title = card.dataset.title || '';
        const location = card.dataset.location || '';
        const features = card.dataset.features || '';
        const county = card.dataset.county || '';
        const size = parseInt(card.dataset.size || '0');
        
        let matches = true;
        
        // Search term filter
        if (searchTerm && !title.includes(searchTerm) && !location.includes(searchTerm) && !features.includes(searchTerm)) {
          matches = false;
        }
        
        // County filter
        if (selectedCounty && county !== selectedCounty) {
          matches = false;
        }
        
        // Size filter
        if (selectedSize && sizeRanges[selectedSize]) {
          const range = sizeRanges[selectedSize];
          if (size < range.min || size > range.max) {
            matches = false;
          }
        }
        
        if (matches) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Update results count
      resultsCount.textContent = `Showing ${visibleCount} properties`;
      
      // Show/hide empty state
      if (visibleCount === 0) {
        propertiesGrid.style.display = 'none';
        propertiesList.style.display = 'none';
        emptyState.style.display = 'block';
      } else {
        emptyState.style.display = 'none';
        if (gridView.classList.contains('bg-white')) {
          propertiesGrid.style.display = 'block';
          propertiesList.style.display = 'none';
        } else {
          propertiesGrid.style.display = 'none';
          propertiesList.style.display = 'block';
        }
      }
    }
    
    function clearAllFilters(): void {
      searchInput.value = '';
      countyFilter.value = '';
      sizeFilter.value = '';
      filterProperties();
    }
    
    function toggleView(view: 'grid' | 'list'): void {
      if (view === 'grid') {
        gridView.classList.add('bg-white', 'shadow-sm', 'text-gray-900');
        gridView.classList.remove('text-gray-500');
        listView.classList.remove('bg-white', 'shadow-sm', 'text-gray-900');
        listView.classList.add('text-gray-500');
        propertiesGrid.style.display = 'block';
        propertiesList.style.display = 'none';
      } else {
        listView.classList.add('bg-white', 'shadow-sm', 'text-gray-900');
        listView.classList.remove('text-gray-500');
        gridView.classList.remove('bg-white', 'shadow-sm', 'text-gray-900');
        gridView.classList.add('text-gray-500');
        propertiesGrid.style.display = 'none';
        propertiesList.style.display = 'block';
      }
    }
    
    // Event listeners
    searchInput.addEventListener('input', filterProperties);
    countyFilter.addEventListener('change', filterProperties);
    sizeFilter.addEventListener('change', filterProperties);
    clearFilters.addEventListener('click', clearAllFilters);
    gridView.addEventListener('click', () => toggleView('grid'));
    listView.addEventListener('click', () => toggleView('list'));
    
    // Initialize with grid view
    toggleView('grid');
  });
</script>