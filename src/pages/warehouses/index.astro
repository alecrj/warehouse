---
// Updated warehouses listing page with consistent hero
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navigation from '../../components/Navigation.astro';
import { getCollection } from 'astro:content';

// Define proper types
interface WarehouseData {
  title: string;
  location: string;
  price: string;
  size: number;
  description: string;
  images?: string[];
  features?: string[];
  featured?: boolean;
  availability?: string;
  slug: string;
}

interface Warehouse {
  data: WarehouseData;
}

// Get warehouse data from CMS
let allWarehouses: Warehouse[] = [];
let availableWarehouses: Warehouse[] = [];
let pendingWarehouses: Warehouse[] = [];
let totalSqFt = 0;
let averageSize = 0;

try {
  allWarehouses = await getCollection('warehouses');
  availableWarehouses = allWarehouses.filter((w: Warehouse) => w.data.availability === 'available');
  pendingWarehouses = allWarehouses.filter((w: Warehouse) => w.data.availability === 'pending');
  totalSqFt = allWarehouses.reduce((sum: number, w: Warehouse) => sum + (w.data.size || 0), 0);
  averageSize = allWarehouses.length > 0 ? Math.round(totalSqFt / allWarehouses.length) : 0;
} catch (error) {
  console.log('No warehouse data yet:', error);
}

// Get search parameters
const url = Astro.url;
const minSize = url.searchParams.get('min_size');
const maxSize = url.searchParams.get('max_size');
const county = url.searchParams.get('county');
const availability = url.searchParams.get('availability');

const pageTitle = 'Available Warehouse Properties | South Florida Industrial Leasing';
const pageDescription = 'Browse premium warehouse and industrial properties across South Florida. Expert tenant representation with zero fees. Modern facilities, competitive rates.';
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <Navigation />
  
  <main>
    <!-- Hero Section - Consistent Sizing with Stats Cards -->
    <section class="relative min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 overflow-hidden flex items-center">
      <!-- Background Elements -->
      <div class="absolute inset-0">
        <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-primary-500/10 rounded-full blur-3xl animate-float"></div>
        <div class="absolute bottom-1/4 right-1/4 w-80 h-80 bg-blue-500/10 rounded-full blur-3xl animate-float-reverse"></div>
        <div class="absolute inset-0 bg-pattern-grid opacity-20"></div>
      </div>
      
      <div class="relative z-10 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <div class="text-center">
          <h1 class="text-4xl sm:text-5xl lg:text-6xl font-black text-white leading-tight tracking-tight mb-6 animate-on-scroll">
            BROWSE OUR
            <span class="block bg-gradient-to-r from-primary-400 to-blue-400 bg-clip-text text-transparent">
              PROPERTIES
            </span>
          </h1>
          <p class="text-lg lg:text-xl text-gray-300 max-w-4xl mx-auto leading-relaxed mb-2 animate-on-scroll">
            Premium warehouse and industrial properties across South Florida.
          </p>
          <p class="text-base text-gray-400 leading-relaxed mb-8 max-w-3xl mx-auto animate-on-scroll">
            Expert representation. Zero fees. Perfect matches.
          </p>
          
          <!-- Statistics Cards - Now in Hero -->
          <div class="grid grid-cols-2 lg:grid-cols-4 gap-6 animate-on-scroll mt-12">
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-primary-200 transition-colors duration-300">
                  {allWarehouses.length}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Total Properties</div>
              </div>
            </div>
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-green-200 transition-colors duration-300">
                  {availableWarehouses.length}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Available Now</div>
              </div>
            </div>
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-blue-200 transition-colors duration-300">
                  {totalSqFt.toLocaleString()}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Total Sq Ft</div>
              </div>
            </div>
            <div class="group text-center p-8 bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 hover:bg-white/15 relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-transparent before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500">
              <div class="relative z-10">
                <div class="text-4xl font-black text-white mb-3 drop-shadow-lg group-hover:text-purple-200 transition-colors duration-300">
                  {averageSize.toLocaleString()}
                </div>
                <div class="text-white/80 text-sm font-semibold uppercase tracking-wider drop-shadow-sm">Avg Size</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Filters & Search -->
    <section class="py-8 bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-col lg:flex-row gap-6 items-center justify-between">
          <!-- Search -->
          <div class="w-full lg:w-96">
            <div class="relative">
              <input 
                type="text" 
                placeholder="Search properties..." 
                id="search-input"
                class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent text-gray-900 placeholder-gray-500"
              />
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
              </div>
            </div>
          </div>

          <!-- Sort -->
          <div class="flex gap-4">
            <select 
              id="sort-select"
              class="px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent text-gray-900"
            >
              <option value="featured">Featured First</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
              <option value="size-small">Size: Small to Large</option>
              <option value="size-large">Size: Large to Small</option>
            </select>
          </div>
        </div>

        <!-- Quick Filters -->
        <div class="mt-6 flex flex-wrap gap-3">
          <button 
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors filter-btn"
            data-filter="availability"
            data-value="available"
          >
            Available Now
          </button>
          <button 
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors filter-btn"
            data-filter="size"
            data-value="small"
          >
            Under 10k SF
          </button>
          <button 
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors filter-btn"
            data-filter="size"
            data-value="medium"
          >
            10k-50k SF
          </button>
          <button 
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors filter-btn"
            data-filter="size"
            data-value="large"
          >
            50k+ SF
          </button>
          <button 
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors filter-btn"
            data-filter="featured"
            data-value="true"
          >
            Featured Only
          </button>
        </div>
      </div>
    </section>

    <!-- Properties Grid -->
    <section class="py-12 bg-gray-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div id="properties-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {allWarehouses.map((warehouse) => (
            <div 
              class="property-card bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 flex flex-col"
              data-warehouse={JSON.stringify(warehouse.data)}
            >
              <!-- Image Section -->
              <div class="relative h-64 overflow-hidden">
                <img 
                  src={warehouse.data.images && warehouse.data.images[0] ? warehouse.data.images[0] : '/placeholder.jpg'}
                  alt={warehouse.data.title}
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                />
                
                <!-- Status Badge -->
                <div class="absolute top-4 left-4">
                  <span class={`px-3 py-1 rounded-full text-xs font-semibold ${
                    warehouse.data.availability === 'available' 
                      ? 'bg-green-100 text-green-700' 
                      : 'bg-yellow-100 text-yellow-700'
                  }`}>
                    {warehouse.data.availability === 'available' ? 'Available' : 'Coming Soon'}
                  </span>
                </div>

                {warehouse.data.featured && (
                  <div class="absolute top-4 right-4">
                    <span class="bg-gradient-to-r from-primary-600 to-primary-700 text-white px-3 py-1 rounded-full text-sm font-semibold">
                      Featured
                    </span>
                  </div>
                )}
              </div>

              <!-- Property Details - Flex Column with Auto Spacing -->
              <div class="p-6 flex-1 flex flex-col">
                
                <!-- Header Section -->
                <div class="mb-4">
                  <h3 class="text-xl font-bold text-gray-900 mb-2 line-clamp-2 min-h-[3.5rem]">
                    {warehouse.data.title}
                  </h3>
                  
                  <div class="flex items-center text-gray-600 mb-3">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    </svg>
                    <span class="font-medium">{warehouse.data.location}</span>
                  </div>
                </div>
                
                <!-- Stats Grid -->
                <div class="grid grid-cols-2 gap-4 mb-4">
                  <div class="text-center p-3 bg-gray-50 rounded-xl">
                    <div class="text-lg font-bold text-gray-900">
                      {warehouse.data.size?.toLocaleString()}
                    </div>
                    <div class="text-gray-600 text-xs">Sq Ft</div>
                  </div>
                  <div class="text-center p-3 bg-gray-50 rounded-xl">
                    <div class="text-lg font-bold text-primary-600">
                      {warehouse.data.price}
                    </div>
                    <div class="text-gray-600 text-xs">per SF/Year</div>
                  </div>
                </div>
                
                <!-- Features (if available) -->
                {warehouse.data.features && warehouse.data.features.length > 0 && (
                  <div class="mb-4 flex-1">
                    <div class="flex flex-wrap gap-2">
                      {warehouse.data.features.slice(0, 3).map((feature) => (
                        <span class="px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-lg">
                          {feature}
                        </span>
                      ))}
                      {warehouse.data.features.length > 3 && (
                        <span class="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-lg">
                          +{warehouse.data.features.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                )}
                
                <!-- CTA Button - Always at Bottom -->
                <div class="mt-auto pt-4">
                  <a 
                    href={`/warehouses/${warehouse.data.slug}`}
                    class="block w-full bg-primary-600 text-white text-center py-3 rounded-xl font-semibold hover:bg-primary-700 transition-colors duration-200"
                  >
                    View Details
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- No Results Message -->
        <div id="no-results" class="hidden text-center py-12">
          <div class="text-gray-400 text-lg mb-4">No properties match your criteria</div>
          <button 
            onclick="clearAllFilters()"
            class="bg-primary-600 text-white px-6 py-3 rounded-xl font-semibold hover:bg-primary-700 transition-colors"
          >
            Clear All Filters
          </button>
        </div>
      </div>
    </section>
  </main>

  <!-- Include Footer (assumed to be imported in BaseLayout) -->
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const propertyCards = document.querySelectorAll('.property-card');
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
      const filterButtons = document.querySelectorAll('.filter-btn');
      const noResultsDiv = document.getElementById('no-results');
      
      type FilterKeys = 'search' | 'availability' | 'size' | 'featured';
      
      let currentFilters: Record<FilterKeys, string> = {
        search: '',
        availability: '',
        size: '',
        featured: ''
      };

      // Search functionality
      if (searchInput) {
        searchInput.addEventListener('input', function(e: Event) {
          const target = e.target as HTMLInputElement;
          if (target) {
            currentFilters.search = target.value.toLowerCase();
            filterProperties();
          }
        });
      }

      // Sort functionality
      if (sortSelect) {
        sortSelect.addEventListener('change', function(e: Event) {
          const target = e.target as HTMLSelectElement;
          if (target) {
            sortProperties(target.value);
          }
        });
      }

      // Filter button functionality
      filterButtons.forEach(function(button) {
        button.addEventListener('click', function(this: HTMLElement) {
          const filterType = this.getAttribute('data-filter') as FilterKeys;
          const filterValue = this.getAttribute('data-value');
          
          if (!filterType || !filterValue) return;
          
          // Toggle filter
          if (currentFilters[filterType] === filterValue) {
            currentFilters[filterType] = '';
            this.classList.remove('bg-primary-600', 'text-white');
            this.classList.add('bg-gray-100', 'text-gray-700');
          } else {
            // Clear other buttons of same type
            filterButtons.forEach(function(btn) {
              if (btn.getAttribute('data-filter') === filterType) {
                btn.classList.remove('bg-primary-600', 'text-white');
                btn.classList.add('bg-gray-100', 'text-gray-700');
              }
            });
            
            currentFilters[filterType] = filterValue;
            this.classList.remove('bg-gray-100', 'text-gray-700');
            this.classList.add('bg-primary-600', 'text-white');
          }
          
          filterProperties();
        });
      });

      function filterProperties() {
        let visibleCount = 0;
        
        propertyCards.forEach(function(card) {
          let showCard = true;
          
          try {
            const warehouseData = card.getAttribute('data-warehouse');
            const warehouse = warehouseData ? JSON.parse(warehouseData) : {};
            
            // Search filter
            if (currentFilters.search) {
              const searchableText = (
                (warehouse.title || '') + ' ' +
                (warehouse.location || '') + ' ' +
                (warehouse.description || '') + ' ' +
                (warehouse.features ? warehouse.features.join(' ') : '')
              ).toLowerCase();
              
              if (!searchableText.includes(currentFilters.search)) {
                showCard = false;
              }
            }
            
            // Availability filter
            if (currentFilters.availability && warehouse.availability !== currentFilters.availability) {
              showCard = false;
            }
            
            // Size filter
            if (currentFilters.size) {
              const size = warehouse.size || 0;
              switch (currentFilters.size) {
                case 'small':
                  if (size >= 10000) showCard = false;
                  break;
                case 'medium':
                  if (size < 10000 || size >= 50000) showCard = false;
                  break;
                case 'large':
                  if (size < 50000) showCard = false;
                  break;
              }
            }
            
            // Featured filter
            if (currentFilters.featured === 'true' && !warehouse.featured) {
              showCard = false;
            }
            
          } catch (e) {
            console.log('Error parsing warehouse data:', e);
          }
          
          // Show/hide card with animation
          const cardElement = card as HTMLElement;
          if (cardElement) {
            if (showCard) {
              cardElement.style.display = 'block';
              visibleCount++;
              if (typeof (window as any).gsap !== 'undefined') {
                (window as any).gsap.fromTo(cardElement, 
                  { opacity: 0, y: 20 },
                  { opacity: 1, y: 0, duration: 0.3 }
                );
              }
            } else {
              if (typeof (window as any).gsap !== 'undefined') {
                (window as any).gsap.to(cardElement, {
                  opacity: 0,
                  y: -20,
                  duration: 0.3,
                  onComplete: function() {
                    cardElement.style.display = 'none';
                  }
                });
              } else {
                cardElement.style.display = 'none';
              }
            }
          }
        });

        // Show/hide no results message
        if (noResultsDiv) {
          if (visibleCount === 0) {
            noResultsDiv.classList.remove('hidden');
          } else {
            noResultsDiv.classList.add('hidden');
          }
        }
      }
      
      function sortProperties(sortBy: string) {
        const grid = document.getElementById('properties-grid');
        if (!grid) return;
        
        const cards = Array.from(propertyCards);
        
        cards.sort(function(a, b) {
          try {
            const dataA = a.getAttribute('data-warehouse');
            const dataB = b.getAttribute('data-warehouse');
            const warehouseA = dataA ? JSON.parse(dataA) : {};
            const warehouseB = dataB ? JSON.parse(dataB) : {};
            
            switch (sortBy) {
              case 'price-low':
                return parseInt((warehouseA.price || '0').replace(/\D/g, '')) - parseInt((warehouseB.price || '0').replace(/\D/g, ''));
              case 'price-high':
                return parseInt((warehouseB.price || '0').replace(/\D/g, '')) - parseInt((warehouseA.price || '0').replace(/\D/g, ''));
              case 'size-small':
                return (warehouseA.size || 0) - (warehouseB.size || 0);
              case 'size-large':
                return (warehouseB.size || 0) - (warehouseA.size || 0);
              case 'featured':
              default:
                if (warehouseA.featured && !warehouseB.featured) return -1;
                if (!warehouseA.featured && warehouseB.featured) return 1;
                return 0;
            }
          } catch (e) {
            console.log('Error sorting properties:', e);
            return 0;
          }
        });
        
        // Re-append sorted cards
        cards.forEach(function(card) {
          grid.appendChild(card);
        });
        
        // Re-animate
        if (typeof (window as any).gsap !== 'undefined') {
          (window as any).gsap.fromTo(cards, 
            { opacity: 0, y: 20 },
            { opacity: 1, y: 0, duration: 0.5, stagger: 0.1 }
          );
        }
      }

      // Clear all filters function
      (window as any).clearAllFilters = function() {
        currentFilters = {
          search: '',
          availability: '',
          size: '',
          featured: ''
        };
        
        // Reset form inputs
        if (searchInput) (searchInput as HTMLInputElement).value = '';
        if (sortSelect) (sortSelect as HTMLSelectElement).value = 'featured';
        
        // Reset filter buttons
        filterButtons.forEach(function(button) {
          button.classList.remove('bg-primary-600', 'text-white');
          button.classList.add('bg-gray-100', 'text-gray-700');
        });
        
        filterProperties();
        sortProperties('featured');
      };

      // Initialize from URL parameters
      function initializeFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        
        // Set search if provided
        const searchQuery = urlParams.get('search');
        if (searchQuery && searchInput) {
          (searchInput as HTMLInputElement).value = searchQuery;
          currentFilters.search = searchQuery.toLowerCase();
        }
        
        // Set filters if provided
        const availability = urlParams.get('availability');
        if (availability) {
          currentFilters.availability = availability;
          const button = document.querySelector(`[data-filter="availability"][data-value="${availability}"]`);
          if (button) {
            button.classList.remove('bg-gray-100', 'text-gray-700');
            button.classList.add('bg-primary-600', 'text-white');
          }
        }
        
        filterProperties();
      }

      // Initialize from URL on page load
      initializeFromURL();
    });
  </script>
</BaseLayout>