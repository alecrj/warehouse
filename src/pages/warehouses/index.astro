---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get all warehouses
let warehouses: any[] = [];
try {
  warehouses = await getCollection('warehouses');
} catch (error) {
  console.log('No warehouses found');
  warehouses = [];
}

// Filter available properties
const availableWarehouses = warehouses.filter(w => w.data.availability === 'available');

// Get unique locations for filter
const locations = [...new Set(warehouses.map(w => w.data.location))];

// Get size ranges for better UX
const sizes = warehouses.map(w => w.data.size).sort((a, b) => a - b);
const minSize = sizes[0] || 0;
const maxSize = sizes[sizes.length - 1] || 1000000;
---

<BaseLayout 
  title="Premium Industrial Properties | South Florida Warehouses"
  description="Explore premium warehouse and industrial properties for lease across Miami-Dade, Broward, and Palm Beach counties. Expert tenant representation available."
>
  <!-- Hero Section -->
  <section class="py-20 gradient-primary">
    <div class="container mx-auto px-4 max-w-7xl">
      <div class="text-center text-white scroll-fade-in">
        <span class="text-label-lg text-blue-300 mb-4 block">Premium Inventory</span>
        <h1 class="text-display-lg font-bold mb-6">
          South Florida
          <span class="text-blue-300">Industrial Properties</span>
        </h1>
        <p class="text-body-xl text-slate-200 max-w-3xl mx-auto">
          Discover premium warehouse and industrial spaces designed for enterprise operations
        </p>
      </div>
    </div>
  </section>

  <!-- Advanced Filters Section -->
  <section class="py-8 bg-white border-b border-slate-200 sticky top-0 z-40" style="backdrop-filter: blur(12px); background-color: rgba(255, 255, 255, 0.95);">
    <div class="container mx-auto px-4 max-w-7xl">
      <div class="flex flex-col lg:flex-row gap-6 items-start lg:items-center justify-between">
        <!-- Search & Filters -->
        <div class="flex flex-col sm:flex-row gap-4 flex-1">
          <!-- Search Input -->
          <div class="relative">
            <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
            <input 
              type="text" 
              id="search-input" 
              placeholder="Search by title, location, or features..."
              class="pl-10 pr-4 py-3 border border-slate-300 rounded-xl text-slate-900 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent w-full sm:w-80"
            />
          </div>

          <!-- Location Filter -->
          <select id="location-filter" class="px-4 py-3 border border-slate-300 rounded-xl text-slate-900 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent">
            <option value="">All Locations</option>
            {locations.map(location => (
              <option value={location}>{location}</option>
            ))}
          </select>

          <!-- County Filter -->
          <select id="county-filter" class="px-4 py-3 border border-slate-300 rounded-xl text-slate-900 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent">
            <option value="">All Counties</option>
            <option value="miami-dade">Miami-Dade</option>
            <option value="broward">Broward</option>
            <option value="palm-beach">Palm Beach</option>
          </select>
        </div>

        <!-- View Toggle & Sort -->
        <div class="flex items-center gap-4">
          <!-- Sort -->
          <select id="sort-select" class="px-4 py-3 border border-slate-300 rounded-xl text-slate-900 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent">
            <option value="featured">Featured First</option>
            <option value="size-desc">Largest First</option>
            <option value="size-asc">Smallest First</option>
            <option value="newest">Newest First</option>
          </select>

          <!-- View Toggle -->
          <div class="flex bg-slate-100 rounded-xl p-1">
            <button id="grid-view" class="px-3 py-2 rounded-lg text-slate-600 hover:text-slate-900 transition-colors grid-active">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
              </svg>
            </button>
            <button id="list-view" class="px-3 py-2 rounded-lg text-slate-600 hover:text-slate-900 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Advanced Filters (Collapsible) -->
      <div class="mt-6">
        <button id="advanced-filters-toggle" class="text-blue-600 hover:text-blue-700 font-medium flex items-center">
          <span>Advanced Filters</span>
          <svg class="w-4 h-4 ml-2 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>

        <div id="advanced-filters" class="hidden mt-4 p-6 bg-slate-50 rounded-xl">
          <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            <!-- Size Range -->
            <div>
              <label class="block text-body-sm font-medium text-slate-700 mb-3">
                Size Range (SF)
              </label>
              <div class="space-y-3">
                <input 
                  type="range" 
                  id="size-min" 
                  min={minSize} 
                  max={maxSize} 
                  value={minSize}
                  class="w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer"
                />
                <div class="flex justify-between text-body-sm text-slate-600">
                  <span id="size-min-value">{minSize.toLocaleString()}</span>
                  <span id="size-max-value">{maxSize.toLocaleString()}</span>
                </div>
              </div>
            </div>

            <!-- Features -->
            <div>
              <label class="block text-body-sm font-medium text-slate-700 mb-3">
                Features
              </label>
              <div class="space-y-2">
                <label class="flex items-center">
                  <input type="checkbox" value="dock-doors" class="feature-checkbox rounded border-slate-300 text-blue-600 focus:ring-blue-500" />
                  <span class="ml-2 text-body-sm text-slate-700">Dock Doors</span>
                </label>
                <label class="flex items-center">
                  <input type="checkbox" value="crane" class="feature-checkbox rounded border-slate-300 text-blue-600 focus:ring-blue-500" />
                  <span class="ml-2 text-body-sm text-slate-700">Overhead Crane</span>
                </label>
                <label class="flex items-center">
                  <input type="checkbox" value="office" class="feature-checkbox rounded border-slate-300 text-blue-600 focus:ring-blue-500" />
                  <span class="ml-2 text-body-sm text-slate-700">Office Space</span>
                </label>
              </div>
            </div>

            <!-- Availability -->
            <div>
              <label class="block text-body-sm font-medium text-slate-700 mb-3">
                Availability
              </label>
              <select id="availability-filter" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-slate-900 focus:outline-none focus:ring-2 focus:ring-blue-600">
                <option value="">All Properties</option>
                <option value="available">Available Now</option>
                <option value="pending">Coming Soon</option>
              </select>
            </div>

            <!-- Clear Filters -->
            <div class="flex items-end">
              <button id="clear-filters" class="w-full btn-secondary py-2">
                Clear All Filters
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Properties Section -->
  <section class="py-16 bg-slate-50">
    <div class="container mx-auto px-4 max-w-7xl">
      <!-- Results Summary -->
      <div class="flex justify-between items-center mb-8">
        <div class="scroll-fade-in">
          <h2 class="text-heading-lg font-semibold text-slate-900">
            <span id="results-count">{availableWarehouses.length}</span> Properties Available
          </h2>
          <p class="text-body-md text-slate-600 mt-1">
            Premium industrial spaces across South Florida
          </p>
        </div>
      </div>

      <!-- Loading State -->
      <div id="loading-state" class="hidden">
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {[1,2,3,4,5,6].map(() => (
            <div class="card-premium p-6 animate-pulse">
              <div class="bg-slate-200 h-48 rounded-xl mb-4"></div>
              <div class="space-y-3">
                <div class="h-4 bg-slate-200 rounded w-3/4"></div>
                <div class="h-4 bg-slate-200 rounded w-1/2"></div>
                <div class="h-8 bg-slate-200 rounded"></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Properties Grid View -->
      <div id="properties-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {availableWarehouses.map((warehouse, index) => (
          <div 
            class="property-card scroll-scale-up group"
            style={`animation-delay: ${index * 100}ms;`}
            data-title={warehouse.data.title.toLowerCase()}
            data-location={warehouse.data.location.toLowerCase()}
            data-size={warehouse.data.size}
            data-features={warehouse.data.features?.join(' ').toLowerCase() || ''}
            data-availability={warehouse.data.availability}
            data-county={
              warehouse.data.location.toLowerCase().includes('miami') || warehouse.data.location.toLowerCase().includes('dade') 
                ? 'miami-dade' 
                : warehouse.data.location.toLowerCase().includes('broward') 
                ? 'broward' 
                : warehouse.data.location.toLowerCase().includes('palm') 
                ? 'palm-beach' 
                : ''
            }
          >
            <div class="card-premium overflow-hidden hover:shadow-2xl transition-all duration-500">
              <!-- Image -->
              <div class="relative aspect-w-16 aspect-h-10 overflow-hidden">
                <img 
                  src={warehouse.data.images?.[0] || '/api/placeholder/400/250'} 
                  alt={warehouse.data.title}
                  class="w-full h-64 object-cover group-hover:scale-105 transition-transform duration-500"
                  loading="lazy"
                />
                
                <!-- Overlay Gradient -->
                <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300" style="background: linear-gradient(to top, rgba(0, 0, 0, 0.2), transparent);"></div>
                
                <!-- Status Badge -->
                <div class="absolute top-4 left-4">
                  <span class={`px-3 py-1 text-label-md rounded-full shadow-lg ${
                    warehouse.data.availability === 'available' 
                      ? 'bg-green-500 text-white' 
                      : 'bg-amber-500 text-white'
                  }`}>
                    {warehouse.data.availability === 'available' ? 'Available Now' : 'Coming Soon'}
                  </span>
                </div>
                
                <!-- Featured Badge -->
                {warehouse.data.featured && (
                  <div class="absolute top-4 right-4">
                    <span class="px-3 py-1 bg-blue-600 text-white text-label-md rounded-full shadow-lg">
                      Featured
                    </span>
                  </div>
                )}
                
                <!-- Quick Actions -->
                <div class="absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex gap-2">
                  <button class="w-10 h-10 rounded-full flex items-center justify-center shadow-lg hover:bg-white transition-colors" style="background-color: rgba(255, 255, 255, 0.9);" title="Save Property">
                    <svg class="w-5 h-5 text-slate-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                    </svg>
                  </button>
                  <button class="w-10 h-10 rounded-full flex items-center justify-center shadow-lg hover:bg-white transition-colors" style="background-color: rgba(255, 255, 255, 0.9);" title="Share Property">
                    <svg class="w-5 h-5 text-slate-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                    </svg>
                  </button>
                </div>
              </div>
              
              <!-- Content -->
              <div class="p-8">
                <!-- Location -->
                <div class="flex items-center text-slate-600 mb-3">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                  </svg>
                  <span class="text-body-sm">{warehouse.data.location}</span>
                </div>
                
                <!-- Title -->
                <h3 class="text-heading-md font-semibold text-slate-900 mb-4 group-hover:text-blue-600 transition-colors line-clamp-2">
                  {warehouse.data.title}
                </h3>
                
                <!-- Stats Grid -->
                <div class="grid grid-cols-2 gap-4 mb-6">
                  <div class="text-center p-4 bg-slate-50 rounded-xl">
                    <div class="text-heading-md font-bold text-slate-900">
                      {warehouse.data.size.toLocaleString()}
                    </div>
                    <div class="text-body-sm text-slate-600">Square Feet</div>
                  </div>
                  <div class="text-center p-4 bg-slate-50 rounded-xl">
                    <div class="text-heading-md font-bold text-slate-900">
                      {warehouse.data.price}
                    </div>
                    <div class="text-body-sm text-slate-600">per SF/year</div>
                  </div>
                </div>
                
                <!-- Features -->
                {warehouse.data.features && warehouse.data.features.length > 0 && (
                  <div class="mb-6">
                    <div class="flex flex-wrap gap-2">
                      {warehouse.data.features.slice(0, 3).map((feature: string) => (
                        <span class="text-label-md px-3 py-1 bg-blue-50 text-blue-700 rounded-full">
                          {feature}
                        </span>
                      ))}
                      {warehouse.data.features.length > 3 && (
                        <span class="text-label-md px-3 py-1 bg-slate-100 text-slate-600 rounded-full">
                          +{warehouse.data.features.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                )}
                
                <!-- Actions -->
                <div class="flex gap-3">
                  <a 
                    href={`/warehouses/${warehouse.data.slug}`} 
                    class="flex-1 btn-secondary text-center py-3 group-hover:border-blue-300 group-hover:text-blue-600 transition-all"
                  >
                    View Details
                  </a>
                  <a 
                    href="tel:+19549379667" 
                    class="btn-accent px-4 py-3"
                    title="Call Now"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Properties List View (Hidden by default) -->
      <div id="properties-list" class="hidden space-y-6">
        {availableWarehouses.map((warehouse, index) => (
          <div 
            class="property-card scroll-fade-in"
            style={`animation-delay: ${index * 50}ms;`}
            data-title={warehouse.data.title.toLowerCase()}
            data-location={warehouse.data.location.toLowerCase()}
            data-size={warehouse.data.size}
            data-features={warehouse.data.features?.join(' ').toLowerCase() || ''}
            data-availability={warehouse.data.availability}
            data-county={
              warehouse.data.location.toLowerCase().includes('miami') || warehouse.data.location.toLowerCase().includes('dade') 
                ? 'miami-dade' 
                : warehouse.data.location.toLowerCase().includes('broward') 
                ? 'broward' 
                : warehouse.data.location.toLowerCase().includes('palm') 
                ? 'palm-beach' 
                : ''
            }
          >
            <div class="card-premium overflow-hidden hover:shadow-xl transition-all duration-300 group">
              <div class="grid lg:grid-cols-3 gap-6 p-6">
                <!-- Image -->
                <div class="lg:col-span-1">
                  <div class="relative aspect-w-16 aspect-h-10 rounded-xl overflow-hidden">
                    <img 
                      src={warehouse.data.images?.[0] || '/api/placeholder/400/250'} 
                      alt={warehouse.data.title}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                    
                    <!-- Status Badge -->
                    <div class="absolute top-3 left-3">
                      <span class={`px-3 py-1 text-label-md rounded-full shadow-lg ${
                        warehouse.data.availability === 'available' 
                          ? 'bg-green-500 text-white' 
                          : 'bg-amber-500 text-white'
                      }`}>
                        {warehouse.data.availability === 'available' ? 'Available' : 'Coming Soon'}
                      </span>
                    </div>
                  </div>
                </div>
                
                <!-- Content -->
                <div class="lg:col-span-2 flex flex-col justify-between">
                  <div>
                    <!-- Header -->
                    <div class="flex justify-between items-start mb-4">
                      <div>
                        <div class="flex items-center text-slate-600 mb-2">
                          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                          </svg>
                          <span class="text-body-sm">{warehouse.data.location}</span>
                        </div>
                        <h3 class="text-heading-lg font-semibold text-slate-900 group-hover:text-blue-600 transition-colors">
                          {warehouse.data.title}
                        </h3>
                      </div>
                      
                      {warehouse.data.featured && (
                        <span class="px-3 py-1 bg-blue-100 text-blue-700 text-label-md rounded-full">
                          Featured
                        </span>
                      )}
                    </div>
                    
                    <!-- Stats -->
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                      <div class="text-center p-3 bg-slate-50 rounded-lg">
                        <div class="text-heading-md font-bold text-slate-900">
                          {warehouse.data.size.toLocaleString()}
                        </div>
                        <div class="text-body-sm text-slate-600">SF</div>
                      </div>
                      <div class="text-center p-3 bg-slate-50 rounded-lg">
                        <div class="text-heading-md font-bold text-slate-900">
                          {warehouse.data.price}
                        </div>
                        <div class="text-body-sm text-slate-600">per SF/year</div>
                      </div>
                      <div class="text-center p-3 bg-slate-50 rounded-lg">
                        <div class="text-heading-md font-bold text-green-600">
                          {warehouse.data.availability === 'available' ? 'Available' : 'Pending'}
                        </div>
                        <div class="text-body-sm text-slate-600">Status</div>
                      </div>
                      <div class="text-center p-3 bg-slate-50 rounded-lg">
                        <div class="text-heading-md font-bold text-slate-900">
                          {warehouse.data.features?.length || 0}
                        </div>
                        <div class="text-body-sm text-slate-600">Features</div>
                      </div>
                    </div>
                    
                    <!-- Features -->
                    {warehouse.data.features && warehouse.data.features.length > 0 && (
                      <div class="mb-6">
                        <div class="flex flex-wrap gap-2">
                          {warehouse.data.features.slice(0, 5).map((feature: string) => (
                            <span class="text-label-md px-3 py-1 bg-blue-50 text-blue-700 rounded-full">
                              {feature}
                            </span>
                          ))}
                          {warehouse.data.features.length > 5 && (
                            <span class="text-label-md px-3 py-1 bg-slate-100 text-slate-600 rounded-full">
                              +{warehouse.data.features.length - 5} more
                            </span>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <!-- Actions -->
                  <div class="flex gap-3">
                    <a 
                      href={`/warehouses/${warehouse.data.slug}`} 
                      class="flex-1 btn-secondary text-center py-3 group-hover:border-blue-300 group-hover:text-blue-600 transition-all"
                    >
                      View Full Details
                    </a>
                    <a 
                      href="tel:+19549379667" 
                      class="btn-accent px-6 py-3"
                      title="Call Now"
                    >
                      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                      </svg>
                      Call
                    </a>
                    <button class="btn-secondary px-4 py-3" title="Share Property">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- No Results State -->
      <div id="no-results" class="hidden text-center py-16">
        <div class="max-w-md mx-auto">
          <svg class="w-16 h-16 text-slate-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
          <h3 class="text-heading-md font-semibold text-slate-900 mb-2">
            No Properties Found
          </h3>
          <p class="text-body-md text-slate-600 mb-6">
            Try adjusting your search criteria or contact us for off-market opportunities.
          </p>
          <button id="clear-all-filters" class="btn-primary">
            Clear All Filters
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section class="py-16 gradient-primary">
    <div class="container mx-auto px-4 max-w-7xl">
      <div class="text-center text-white scroll-fade-in">
        <h2 class="text-heading-xl font-bold mb-6">
          Don't See What You're Looking For?
        </h2>
        <p class="text-body-lg text-slate-200 mb-8 max-w-2xl mx-auto">
          We have access to off-market properties and upcoming listings. 
          Let our experts help you find the perfect space.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a href="tel:+19549379667" class="btn-primary bg-white text-slate-900 hover:bg-slate-100">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
            </svg>
            Call (954) 937-9667
          </a>
          <a href="/#consultation" class="btn-secondary text-white" style="border-color: rgba(255, 255, 255, 0.3); background-color: rgba(255, 255, 255, 0.1);">
            Request Custom Search
          </a>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .grid-active {
    @apply bg-white text-slate-900 shadow-sm;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<!-- Enhanced Filtering & UI Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const locationFilter = document.getElementById('location-filter') as HTMLSelectElement;
    const countyFilter = document.getElementById('county-filter') as HTMLSelectElement;
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const advancedFiltersToggle = document.getElementById('advanced-filters-toggle');
    const advancedFilters = document.getElementById('advanced-filters');
    const sizeMin = document.getElementById('size-min') as HTMLInputElement;
    const sizeMinValue = document.getElementById('size-min-value');
    const featureCheckboxes = document.querySelectorAll('.feature-checkbox') as NodeListOf<HTMLInputElement>;
    const availabilityFilter = document.getElementById('availability-filter') as HTMLSelectElement;
    const clearFilters = document.getElementById('clear-filters');
    const clearAllFilters = document.getElementById('clear-all-filters');
    const gridView = document.getElementById('grid-view');
    const listView = document.getElementById('list-view');
    const propertiesGrid = document.getElementById('properties-grid');
    const propertiesList = document.getElementById('properties-list');
    const resultsCount = document.getElementById('results-count');
    const noResults = document.getElementById('no-results');
    
    let properties = Array.from(document.querySelectorAll('.property-card') as NodeListOf<HTMLElement>);
    let isGridView = true;

    // Advanced filters toggle
    advancedFiltersToggle?.addEventListener('click', function() {
      const isHidden = advancedFilters?.classList.contains('hidden');
      if (isHidden) {
        advancedFilters?.classList.remove('hidden');
        this.querySelector('svg')?.classList.add('rotate-180');
      } else {
        advancedFilters?.classList.add('hidden');
        this.querySelector('svg')?.classList.remove('rotate-180');
      }
    });

    // Size range updates
    sizeMin?.addEventListener('input', function() {
      if (sizeMinValue) {
        sizeMinValue.textContent = parseInt((this as HTMLInputElement).value).toLocaleString();
      }
      filterProperties();
    });

    // View toggle
    gridView?.addEventListener('click', function() {
      if (!isGridView) {
        isGridView = true;
        this.classList.add('grid-active');
        listView?.classList.remove('grid-active');
        propertiesGrid?.classList.remove('hidden');
        propertiesList?.classList.add('hidden');
      }
    });

    listView?.addEventListener('click', function() {
      if (isGridView) {
        isGridView = false;
        this.classList.add('grid-active');
        gridView?.classList.remove('grid-active');
        propertiesGrid?.classList.add('hidden');
        propertiesList?.classList.remove('hidden');
      }
    });

    // Filter function
    function filterProperties() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const selectedLocation = locationFilter?.value || '';
      const selectedCounty = countyFilter?.value || '';
      const selectedAvailability = availabilityFilter?.value || '';
      const minSize = parseInt(sizeMin?.value || '0');
      const selectedFeatures = Array.from(featureCheckboxes || [])
        .filter(cb => cb.checked)
        .map(cb => cb.value);

      let visibleProperties = properties.filter(property => {
        const title = property.dataset.title || '';
        const location = property.dataset.location || '';
        const size = parseInt(property.dataset.size || '0');
        const features = property.dataset.features || '';
        const availability = property.dataset.availability || '';
        const county = property.dataset.county || '';

        // Search filter
        if (searchTerm && !title.includes(searchTerm) && !location.includes(searchTerm) && !features.includes(searchTerm)) {
          return false;
        }

        // Location filter
        if (selectedLocation && !location.includes(selectedLocation.toLowerCase())) {
          return false;
        }

        // County filter
        if (selectedCounty && county !== selectedCounty) {
          return false;
        }

        // Size filter
        if (size < minSize) {
          return false;
        }

        // Availability filter
        if (selectedAvailability && availability !== selectedAvailability) {
          return false;
        }

        // Features filter
        if (selectedFeatures.length > 0) {
          const hasAllFeatures = selectedFeatures.every(feature => 
            features.includes(feature.replace('-', ' '))
          );
          if (!hasAllFeatures) {
            return false;
          }
        }

        return true;
      });

      // Sort properties
      const sortValue = sortSelect?.value || 'featured';
      visibleProperties.sort((a, b) => {
        switch (sortValue) {
          case 'size-desc':
            return parseInt(b.dataset.size || '0') - parseInt(a.dataset.size || '0');
          case 'size-asc':
            return parseInt(a.dataset.size || '0') - parseInt(b.dataset.size || '0');
          case 'newest':
            return Date.parse(b.dataset.created || '0') - Date.parse(a.dataset.created || '0');
          default: // featured
            return 0;
        }
      });

      // Show/hide properties
      properties.forEach(property => {
        if (visibleProperties.includes(property)) {
          property.style.display = '';
        } else {
          property.style.display = 'none';
        }
      });

      // Update results count
      if (resultsCount) {
        resultsCount.textContent = visibleProperties.length.toString();
      }

      // Show/hide no results message
      if (visibleProperties.length === 0) {
        noResults?.classList.remove('hidden');
        propertiesGrid?.classList.add('hidden');
        propertiesList?.classList.add('hidden');
      } else {
        noResults?.classList.add('hidden');
        if (isGridView) {
          propertiesGrid?.classList.remove('hidden');
        } else {
          propertiesList?.classList.remove('hidden');
        }
      }
    }

    // Clear filters
    function clearAllFiltersFunc() {
      if (searchInput) searchInput.value = '';
      if (locationFilter) locationFilter.value = '';
      if (countyFilter) countyFilter.value = '';
      if (sortSelect) sortSelect.value = 'featured';
      if (availabilityFilter) availabilityFilter.value = '';
      if (sizeMin) {
        sizeMin.value = sizeMin.min;
        if (sizeMinValue) sizeMinValue.textContent = parseInt(sizeMin.min).toLocaleString();
      }
      featureCheckboxes?.forEach(cb => cb.checked = false);
      filterProperties();
    }

    // Event listeners
    searchInput?.addEventListener('input', filterProperties);
    locationFilter?.addEventListener('change', filterProperties);
    countyFilter?.addEventListener('change', filterProperties);
    sortSelect?.addEventListener('change', filterProperties);
    availabilityFilter?.addEventListener('change', filterProperties);
    featureCheckboxes?.forEach(cb => cb.addEventListener('change', filterProperties));
    clearFilters?.addEventListener('click', clearAllFiltersFunc);
    clearAllFilters?.addEventListener('click', clearAllFiltersFunc);

    // Scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');
        }
      });
    }, observerOptions);

    document.querySelectorAll('.scroll-fade-in, .scroll-scale-up').forEach(el => {
      observer.observe(el);
    });
  });
</script>