---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get all available warehouses
const warehouses = await getCollection('warehouses');
const availableWarehouses = warehouses.filter(w => w.data.availability === 'available');

// Extract unique values for filters
const counties = [...new Set(availableWarehouses.map(w => {
  const location = w.data.location.toLowerCase();
  if (location.includes('miami') || location.includes('dade')) return 'miami-dade';
  if (location.includes('broward') || location.includes('fort lauderdale') || location.includes('pompano')) return 'broward';
  if (location.includes('palm beach') || location.includes('boca') || location.includes('west palm')) return 'palm-beach';
  return 'other';
}))].filter(c => c !== 'other');

const sizeRanges = [
  { label: 'Under 5,000 SF', value: 'under-5000', min: 0, max: 4999 },
  { label: '5,000 - 25,000 SF', value: '5000-25000', min: 5000, max: 25000 },
  { label: '25,000 - 100,000 SF', value: '25000-100000', min: 25000, max: 100000 },
  { label: 'Over 100,000 SF', value: 'over-100000', min: 100000, max: Infinity }
];

const features = ['Loading Docks', 'Clear Height 24ft+', 'Office Space', 'Dock Doors', 'Grade Level'];
---

<BaseLayout 
  title="Industrial Properties for Lease | South Florida Warehouses"
  description="Browse available warehouse and industrial properties across Miami-Dade, Broward, and Palm Beach counties. Expert tenant representation at no cost."
>
  <!-- Page Header -->
  <section class="py-16 bg-surface-alt border-b border-black/5">
    <div class="container container-marketing">
      <div class="reveal">
        <h1 class="mb-6">Industrial Properties</h1>
        <p class="text-xl text-muted max-w-3xl">
          Browse warehouse and industrial spaces available for lease across South Florida. 
          All properties come with free expert tenant representation.
        </p>
      </div>
    </div>
  </section>

  <!-- Filters -->
  <section class="py-8 bg-white sticky top-20 z-40 border-b border-black/5">
    <div class="container container-marketing">
      <form id="property-filters" class="reveal">
        <div class="grid md:grid-cols-5 gap-4 mb-6">
          <!-- County Filter -->
          <div>
            <label class="form-label" for="county-filter">County</label>
            <select id="county-filter" name="county" class="form-select">
              <option value="">All Counties</option>
              <option value="miami-dade">Miami-Dade</option>
              <option value="broward">Broward</option>
              <option value="palm-beach">Palm Beach</option>
            </select>
          </div>

          <!-- Size Range Filter -->
          <div>
            <label class="form-label" for="size-filter">Size Range</label>
            <select id="size-filter" name="size" class="form-select">
              <option value="">All Sizes</option>
              {sizeRanges.map(range => (
                <option value={range.value}>{range.label}</option>
              ))}
            </select>
          </div>

          <!-- Budget Filter -->
          <div>
            <label class="form-label" for="budget-filter">Budget (per SF/yr)</label>
            <select id="budget-filter" name="budget" class="form-select">
              <option value="">All Budgets</option>
              <option value="under-8">Under $8</option>
              <option value="8-12">$8 - $12</option>
              <option value="12-16">$12 - $16</option>
              <option value="over-16">Over $16</option>
            </select>
          </div>

          <!-- Clear Height Filter -->
          <div>
            <label class="form-label" for="height-filter">Clear Height</label>
            <select id="height-filter" name="height" class="form-select">
              <option value="">Any Height</option>
              <option value="18+">18+ feet</option>
              <option value="24+">24+ feet</option>
              <option value="30+">30+ feet</option>
            </select>
          </div>

          <!-- Actions -->
          <div class="flex items-end">
            <button type="button" id="clear-filters" class="btn btn-secondary w-full">
              Clear Filters
            </button>
          </div>
        </div>

        <!-- Feature Chips -->
        <div class="space-y-2">
          <label class="form-label">Features</label>
          <div class="flex flex-wrap gap-2">
            {features.map(feature => (
              <button 
                type="button" 
                class="chip feature-chip" 
                data-feature={feature.toLowerCase()}
              >
                {feature}
              </button>
            ))}
          </div>
        </div>
      </form>
    </div>
  </section>

  <!-- Results -->
  <section class="section">
    <div class="container container-marketing">
      <!-- Results Header -->
      <div class="flex items-center justify-between mb-8 reveal">
        <div>
          <h2 id="results-count">{availableWarehouses.length} Properties Available</h2>
          <p class="text-muted">Showing all available properties</p>
        </div>
        <div class="flex items-center gap-4">
          <label class="form-label mb-0" for="sort-select">Sort by:</label>
          <select id="sort-select" class="form-select" style="width: auto;">
            <option value="featured">Featured First</option>
            <option value="size-asc">Size: Low to High</option>
            <option value="size-desc">Size: High to Low</option>
            <option value="newest">Newest First</option>
          </select>
        </div>
      </div>

      <!-- Properties Grid -->
      <div id="properties-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {availableWarehouses.map((warehouse, index) => (
          <div 
            class="property-card card reveal" 
            style={`animation-delay: ${index * 50}ms`}
            data-county={warehouse.data.location.toLowerCase().includes('miami') || warehouse.data.location.toLowerCase().includes('dade') ? 'miami-dade' : 
                         warehouse.data.location.toLowerCase().includes('broward') || warehouse.data.location.toLowerCase().includes('fort lauderdale') ? 'broward' :
                         warehouse.data.location.toLowerCase().includes('palm beach') || warehouse.data.location.toLowerCase().includes('boca') ? 'palm-beach' : 'other'}
            data-size={warehouse.data.size}
            data-features={warehouse.data.features.join(',').toLowerCase()}
            data-featured={warehouse.data.featured}
            data-date={warehouse.data.createdAt}
          >
            <!-- Property Image -->
            <div class="relative">
              {warehouse.data.images && warehouse.data.images[0] ? (
                <img 
                  src={warehouse.data.images[0]} 
                  alt={warehouse.data.title}
                  class="w-full h-48 object-cover"
                  loading="lazy"
                />
              ) : (
                <div class="w-full h-48 bg-surface-alt flex items-center justify-center">
                  <svg class="w-12 h-12 text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </div>
              )}
              
              <!-- Status & Featured Badges -->
              <div class="absolute top-4 left-4 flex gap-2">
                <span class="chip active">Available</span>
                {warehouse.data.featured && (
                  <span class="chip" style="background: #F59E0B; color: white; border-color: #F59E0B;">Featured</span>
                )}
              </div>
            </div>
            
            <!-- Property Details -->
            <div class="card-body">
              <h3 class="mb-3">
                <a href={`/properties/${warehouse.data.slug}`} class="text-brand hover:text-accent transition-colors">
                  {warehouse.data.title}
                </a>
              </h3>
              
              <p class="text-muted mb-4 flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                </svg>
                {warehouse.data.location}
              </p>
              
              <div class="flex items-center justify-between mb-6">
                <div>
                  <div class="text-lg font-semibold">{warehouse.data.size.toLocaleString()} SF</div>
                  <div class="text-sm text-muted">{warehouse.data.price}</div>
                </div>
              </div>
              
              <!-- Features -->
              {warehouse.data.features && warehouse.data.features.length > 0 && (
                <div class="mb-6">
                  <div class="flex flex-wrap gap-1">
                    {warehouse.data.features.slice(0, 3).map(feature => (
                      <span class="text-xs px-2 py-1 bg-surface-alt text-muted rounded">{feature}</span>
                    ))}
                    {warehouse.data.features.length > 3 && (
                      <span class="text-xs px-2 py-1 bg-surface-alt text-muted rounded">
                        +{warehouse.data.features.length - 3} more
                      </span>
                    )}
                  </div>
                </div>
              )}
              
              <!-- Actions -->
              <div class="flex gap-3">
                <a href={`/properties/${warehouse.data.slug}`} class="btn btn-secondary flex-1">
                  View Details
                </a>
                <a href="tel:+19549379667" class="btn btn-primary">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="hidden text-center py-16">
        <div class="max-w-md mx-auto">
          <svg class="w-24 h-24 text-muted mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <h3 class="mb-4">No Properties Found</h3>
          <p class="text-muted mb-8">
            No properties match your current filters. Try adjusting your search criteria or contact us for personalized assistance.
          </p>
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <button id="reset-search" class="btn btn-secondary">
              Clear All Filters
            </button>
            <a href="tel:+19549379667" class="btn btn-primary">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
              </svg>
              Call for Help
            </a>
          </div>
        </div>
      </div>

      <!-- Loading Skeletons -->
      <div id="loading-skeletons" class="hidden grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {[...Array(6)].map(() => (
          <div class="card">
            <div class="w-full h-48 skeleton"></div>
            <div class="card-body space-y-4">
              <div class="h-6 skeleton w-3/4"></div>
              <div class="h-4 skeleton w-1/2"></div>
              <div class="h-4 skeleton w-1/3"></div>
              <div class="flex gap-3">
                <div class="h-10 skeleton flex-1"></div>
                <div class="h-10 w-12 skeleton"></div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section class="py-16 bg-brand text-white">
    <div class="container container-marketing text-center">
      <div class="reveal">
        <h2 class="text-white mb-6">Don't See What You're Looking For?</h2>
        <p class="text-xl text-white/80 mb-8 max-w-3xl mx-auto">
          We have access to off-market properties and upcoming availabilities. 
          Let our experts find the perfect space for your business.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a href="tel:+19549379667" class="btn btn-accent btn-lg">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
            </svg>
            Call (954) 937-9667
          </a>
          <a href="/contact" class="btn btn-secondary btn-lg bg-white text-brand hover:bg-white/90">
            Request Custom Search
            <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Filter & Sort Logic -->
  <script>
    class PropertyFilter {
      constructor() {
        this.properties = Array.from(document.querySelectorAll('.property-card'));
        this.filters = {
          county: '',
          size: '', 
          budget: '',
          height: '',
          features: new Set()
        };
        this.sortBy = 'featured';
        
        this.initEventListeners();
        this.loadFromURL();
      }
      
      initEventListeners() {
        // Filter inputs
        document.getElementById('county-filter')?.addEventListener('change', (e) => {
          this.filters.county = e.target.value;
          this.applyFilters();
        });
        
        document.getElementById('size-filter')?.addEventListener('change', (e) => {
          this.filters.size = e.target.value;
          this.applyFilters();
        });
        
        document.getElementById('budget-filter')?.addEventListener('change', (e) => {
          this.filters.budget = e.target.value;
          this.applyFilters();
        });
        
        document.getElementById('height-filter')?.addEventListener('change', (e) => {
          this.filters.height = e.target.value;
          this.applyFilters();
        });
        
        // Feature chips
        document.querySelectorAll('.feature-chip').forEach(chip => {
          chip.addEventListener('click', (e) => {
            const feature = e.target.dataset.feature;
            if (this.filters.features.has(feature)) {
              this.filters.features.delete(feature);
              e.target.classList.remove('active');
            } else {
              this.filters.features.add(feature);
              e.target.classList.add('active');
            }
            this.applyFilters();
          });
        });
        
        // Sort
        document.getElementById('sort-select')?.addEventListener('change', (e) => {
          this.sortBy = e.target.value;
          this.applyFilters();
        });
        
        // Clear filters
        document.getElementById('clear-filters')?.addEventListener('click', () => this.clearFilters());
        document.getElementById('reset-search')?.addEventListener('click', () => this.clearFilters());
      }
      
      loadFromURL() {
        const params = new URLSearchParams(window.location.search);
        
        if (params.get('county')) {
          this.filters.county = params.get('county');
          document.getElementById('county-filter').value = this.filters.county;
        }
        
        if (params.get('size')) {
          this.filters.size = params.get('size');
          document.getElementById('size-filter').value = this.filters.size;
        }
        
        if (params.get('budget')) {
          this.filters.budget = params.get('budget');
          document.getElementById('budget-filter').value = this.filters.budget;
        }
        
        if (params.get('height')) {
          this.filters.height = params.get('height');
          document.getElementById('height-filter').value = this.filters.height;
        }
        
        this.applyFilters();
      }
      
      updateURL() {
        const params = new URLSearchParams();
        
        if (this.filters.county) params.set('county', this.filters.county);
        if (this.filters.size) params.set('size', this.filters.size);
        if (this.filters.budget) params.set('budget', this.filters.budget);
        if (this.filters.height) params.set('height', this.filters.height);
        
        const url = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
        window.history.replaceState({}, '', url);
      }
      
      applyFilters() {
        let filtered = this.properties.filter(property => {
          // County filter
          if (this.filters.county && property.dataset.county !== this.filters.county) {
            return false;
          }
          
          // Size filter
          if (this.filters.size) {
            const size = parseInt(property.dataset.size);
            const sizeRanges = {
              'under-5000': [0, 4999],
              '5000-25000': [5000, 25000],
              '25000-100000': [25000, 100000],
              'over-100000': [100000, Infinity]
            };
            const [min, max] = sizeRanges[this.filters.size];
            if (size < min || size > max) return false;
          }
          
          // Feature filter
          if (this.filters.features.size > 0) {
            const propertyFeatures = property.dataset.features.toLowerCase();
            for (const feature of this.filters.features) {
              if (!propertyFeatures.includes(feature)) return false;
            }
          }
          
          return true;
        });
        
        // Sort
        filtered.sort((a, b) => {
          switch (this.sortBy) {
            case 'size-asc':
              return parseInt(a.dataset.size) - parseInt(b.dataset.size);
            case 'size-desc':
              return parseInt(b.dataset.size) - parseInt(a.dataset.size);
            case 'newest':
              return new Date(b.dataset.date) - new Date(a.dataset.date);
            case 'featured':
            default:
              const aFeatured = a.dataset.featured === 'true' ? 1 : 0;
              const bFeatured = b.dataset.featured === 'true' ? 1 : 0;
              return bFeatured - aFeatured;
          }
        });
        
        this.displayResults(filtered);
        this.updateURL();
      }
      
      displayResults(filtered) {
        // Hide all properties
        this.properties.forEach(p => p.style.display = 'none');
        
        // Show filtered properties
        filtered.forEach((p, index) => {
          p.style.display = 'block';
          p.style.animationDelay = `${index * 50}ms`;
        });
        
        // Update count
        const resultsCount = document.getElementById('results-count');
        resultsCount.textContent = `${filtered.length} Properties Available`;
        
        // Show/hide empty state
        const emptyState = document.getElementById('empty-state');
        const grid = document.getElementById('properties-grid');
        
        if (filtered.length === 0) {
          emptyState.classList.remove('hidden');
          grid.classList.add('hidden');
        } else {
          emptyState.classList.add('hidden');
          grid.classList.remove('hidden');
        }
      }
      
      clearFilters() {
        this.filters = {
          county: '',
          size: '',
          budget: '',
          height: '',
          features: new Set()
        };
        
        // Reset form
        document.getElementById('property-filters').reset();
        document.querySelectorAll('.feature-chip').forEach(chip => {
          chip.classList.remove('active');
        });
        
        this.applyFilters();
      }
    }
    
    // Initialize filter when page loads
    document.addEventListener('DOMContentLoaded', () => {
      new PropertyFilter();
    });
  </script>
</BaseLayout>